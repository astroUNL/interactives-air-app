
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// STAY OUT!!! - DO NOT CHANGE ANY CODE THAT FOLLOWS
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
//Initialization of the quesiton
function activity_Initialize() {
	//Sets the variables that change for each instance of RT
	activity_Setup();
	//sets the width and height for screen
	myRoot_Setup();
	//Sets up the EDU mode clipboard
	if (not eduMode) {
		clipboard_Setup();
	}
	//Sets background color, puts variables in the correct format                                                              
	activity_LaunchBegin();
}

function activity_LaunchBegin() {
	//allow the following edu servers to communicate with this file
	System.security.allowDomain("unl.edu");
	System.security.allowDomain("brownstone.net");
	System.security.allowDomain("calculus.unl.edu");
	System.security.allowDomain("webtests1.unl.edu:8026");

	//for debuging in EDU
	helpClip.swapDepths(50000);
	helpClip.helpTextField.text = "";
	helpClip.helpTextField.text += "response: "+response+"\r";

	// disable the right click zoom menu
	Stage.showMenu = false;

	// hide things, move things
	itemArea._visible = false;
	activityBorder._visible = false;

	//not sure what these do
	flagDragging = false;
	flagMouseDown = false;

	//sets the try again to be invisible for now
	tryagainButtonClip._visible = false;
	nextstageButtonClip._visible=false;
	tryagainButtonClip.tryagainButton.tabEnabled = false;
	gradeTextField.removeTextField();

	// setting locked if not already set
	locked = data_Test(locked);

	//sets manipulationMode and if false then invisible
	manipulationMode = data_Test(manipulationMode);
	if (manipulationMode<>true) {
		manipulationModeClip._visible = false;
	} else {
		manipulationModeClip._visible = true;
	}

	//sets lessonMode and if false then invisible
	lessonMode = data_Test(lessonMode);
	if (lessonMode<>true) {
		lessonbuttonClip._visible = false;
	} else {
		lessonbuttonClip._visible = true;
	}

	//sets pictureMode and if false then invisible
	pictureMode = data_Test(pictureMode);
	if (pictureMode<>true) {
		pictureArea._visible = false;
	} else {
		pictureArea._visible = false;
	}


	//make sure tab is not enabled to select
	pictureArea.tabEnabled = false;
	lessonbuttonClip.lessonButton.tabEnabled = false;

	// sets up so that on the release of grading info button the algorithm is displayed
	//and the lock toggle is called to bring up the background cover
	gradinginfoButton_Setup();

	//setting the levels for the N, grading info and background buttons
	bigN.swapDepths(15000);
	bigN.tabEnabled = false;
	gradinginfoButtonClip.swapDepths(15001);
	lessonbuttonClip.swapDepths(15002);

	// starting level
	level = 10;

	// convert input parameters to proper format
	// data test checks to see if the value is null, empty or 0, etc and makes it false 
	answerFlag = (response == "answer") ? true : false;
	dynamicMode = data_Test(dynamicMode);
	cyclicMode = data_Test(cyclicMode);
	rationaleMode = data_Test(rationaleMode);
	trace("rationaleMode: "+rationaleMode);
	explanationMode = data_Test(explanationMode);
	itemAreaFlexible = data_Test(itemAreaFlexible);
	hitAreaForced = data_Test(hitAreaForced);
	gradeOption = (data_Test(gradeOption)) ? Number(String(gradeOption)) : gradeOptionDefault;
	responseArray = response.split(responsedelim_1);
	selectionArray = (data_Test(response)) ? responseArray[0].split(responsedelim_0) : null;
	trace("selectionArray: "+selectionArray);
	rankNum = (data_Test(response)) ? responseArray[1] : null;
	cyclicStart = (data_Test(response)) ? responseArray[2] : null;
	rationaleString = (data_Test(response)) ? responseArray[3] : "";

	//Rationalle Button Clip has two frames: one for student to explain & one to explain at end
	rationalebuttonClip.gotoAndStop(1);
	rationalebuttonClip.rationaleButton.tabEnabled = false;
	rationalebuttonClip._visible = false;

	rationaleButton_Update();

	constantArray = (responseArray.length>4) ? responseArray[4].split(responsedelim_0) : null;
	trace("constantArray: "+constantArray);
	dynamicParamArray = responseArray.slice(5);
	trace("dynamicParamArray: "+dynamicParamArray);
	helpClip.helpTextField.text += "dynamicParamArray: "+dynamicParamArray+"\r";
	dynamicParamArray = (responseArray.length>5) ? dynamicParamArray_Construct(dynamicParamArray) : dynamicParamArray_Construct(null);
	trace("dynamicParamArray: "+dynamicParamArray);
	helpClip.helpTextField.text += "dynamicParamArray: "+dynamicParamArray+"\r";
	rankArray = toArray_Convert(rankData, delim_0, delim_1, true);
	if(stageMode)
	{
		//setup_stageButtons();
		if(termPerStage==undefined) termPerStage = 2;
		trace("RankNum1: "+rankNum);
		trace("Term Per Stage: "+termPerStage);
		if(rankNum == null)
		{
			if(prevRankNum ==null){
			rankNum=Math.floor(Math.random()*termPerStage);	
			}
			else{
				rankNum=prevRankNum;
			}
			trace("RankNum Was Null: "+rankNum+prevRankNum);
		}	
		if(sameStage == null) 
		{
			sameStage = true;
			trace("sameStage Was Null: "+rankNum);	
		}
		if(sameStage)
		{
			if((rankNum%termPerStage) == 0)
			{
				rankNum = rankNum+Math.floor(Math.random()*(termPerStage-1))+1;
			}else{
				rankNum--;
			}
			trace("sameStage Was true: "+rankNum);
		}else{
			if((rankNum%termPerStage) == 0)
			{
				rankNum = rankNum + Math.floor(Math.random()*termPerStage) + 2;
			}else{
				rankNum = rankNum + Math.floor(Math.random()*termPerStage) + 1;
			}
			if(rankNum >= rankArray.length)
			{
				rankNum=0;
			}
			trace("sameStage Was false: "+rankNum);
		}
		trace("RankNum: "+rankNum);
		prevRankNum=rankNum;
		if(stageNum == 2)
		{
			nextstageButtonClip.select_2._visible = false;
			stageGraph.select_2._visible = false;
			stageGraph.stage_2._visible = false;
			stageGraph.StageNum_2._visible = false;
		}
	}
	else{	
		if (rankNum == null) {
			if (rankArray[1]<>undefined) {
				rankIndex = Math.floor(Math.random()*rankArray.length);
				if (rankArray[rankIndex][0]<>undefined) {
					rankNum = rankArray[rankIndex][0];
				} else {
					rankNum = rankArray[0];
				}
			} else {
				rankNum = rankArray;
				var rankIndex = 0;
			}
		} else {
			rankIndex = 0;
		}
		trace("rankNUm="+rankIndex);
	}

	if(feedback<>null)
	{
		explanationText = feedback[rankNum];
	}

	//equiv information that is needed
	equivMode = data_Test(equivMode);
	if (equivMode) {
		equivArray = toArray_Convert(equivData, delim_0, delim_1, true);
		equivButtonArray = toEquivArray_Convert(equivData, delim_0, delim_1, true);
		equivButtonSelect = new Array(equivButtonArray.length);
		variable_Report("feedback_Display","referenced","equivArray[0][1]","equivMode");
		trace("equivButtonArray: "+equivButtonArray);
		trace("equivButtonSelect: "+equivButtonSelect);
	}

	// color scheme setup                          
	colorScheme = Number(String(colorScheme));
	backgroundHardEdged = data_Test(backgroundHardEdged);
	colorSchemeName = "colorScheme_"+colorScheme;
	colorSchemeObject = eval(colorSchemeName);
	colorSchemeArray = [];
	colorSchemeArray.push(colorSchemeObject.colorBackground);
	colorSchemeArray.push(colorSchemeObject.colorTextBody);
	colorSchemeArray.push(colorSchemeObject.colorTextTitle);
	colorSchemeArray.push(colorSchemeObject.colorTextHighlight1);
	colorSchemeArray.push(colorSchemeObject.colorTextHighlight2);
	colorSchemeArray.push(colorSchemeObject.colorTextHighlight3);
	colorSchemeArray.push(colorSchemeObject.colorTextHighlight4);
	itemlabelTextStyleHTML = "<p align='center'><b><font face='Verdana' size='14' color='#"+colorSchemeObject.colorTextBody+"'>";
	rationaleinstructionsTextStyleHTML = "<p align='center'><b><font face='Verdana' size='14' color='#"+colorSchemeObject.colorTextTitle+"'>";
	var colorName = "0x"+colorSchemeObject.colorBackground;
	var colorObject = new Color(backgroundClip);
	colorObject.setRGB(colorName);


	if (backgroundHardEdged) {
		if (pictureMode) {
			if (!(data_Test(bgheight))) {
				bgheight = backgroundClip._height;
			}
			var temp1 = myRoot_height-(bgheight/2);
			backgroundClip.lineStyle(0,0,0);
			backgroundClip.beginFill(colorName);
			backgroundClip.moveTo(-backgroundClip._width/2,-bgheight/2);
			backgroundClip.lineTo(backgroundClip._width/2,-bgheight/2);
			backgroundClip.lineTo(backgroundClip._width/2,temp1);
			backgroundClip.lineTo(-backgroundClip._width/2,temp1);
			backgroundClip.endFill();

		} else {
			backgroundClip.lineStyle(0,0,0);
			backgroundClip.beginFill(colorName);
			backgroundClip.moveTo(-backgroundClip._width/2,-backgroundClip._height/2);
			backgroundClip.lineTo(backgroundClip._width/2,-backgroundClip._height/2);
			backgroundClip.lineTo(backgroundClip._width/2,backgroundClip._height/2);
			backgroundClip.lineTo(-backgroundClip._width/2,backgroundClip._height/2);
			backgroundClip.endFill();
		}
	}

	if (keyListener == null) {
		keyListener_Setup();
	}

	if (manipulationMode) {
		trace("setting up listeners");
		// mouse listener setup
		if (mouseListener == null) {
			mouseListener_Setup();
		}

		manipulationMode_Display();
		manipulationModeClip.timeStart = new Date();
		manipulationModeClip.counter = 0;
		manipulationModeClip.onEnterFrame = function() {
			this.timeCurrent = new Date();
			if ((this.timeCurrent.getTime()-this.timeStart.getTime())>300) {
				this.boxClip.gotoAndStop((this.boxClip._currentframe == 1)+1);
				this.timeStart = new Date();
				this.counter++;
				if (this.counter>10) {
					this.boxClip.gotoAndStop(1);
					delete this.onEnterFrame;
				}
			}
		};
	}


	// lock setup                                                              
	lock_Toggle((locked or answerFlag),(locked*10000)+(answerFlag*10000),(answerFlag*100));
	grademeButton._visible = !locked;
	grademeButton.tabEnabled = false;

	// EDU mode setup
	if (eduMode) {
		bigN._visible = false;
		grademeButton._visible = false;
		tryagainButtonClip._visible = false;
	}

	// grading info (algorithm) setup                                                              
	algDescription.gotoAndStop(gradeOption);
	algDescription.swapDepths(30000);
	var algClose = eval("algDescription.close_"+(gradeOption-1));
	algClose.tabEnabled = false;

	// load dynamic items
	if (dynamicMode) {
		function_Report("dynamic_Load","begin",0);
		rangeBegin = (data_Test(rangeBegin)) ? Number(rangeBegin) : 0;
		rangeEnd = (data_Test(rangeEnd)) ? Number(rangeEnd) : 0;
		selectionTotal = (data_Test(selectionData)) ? Number(String(selectionData)) : selectionDefault;
		dynamicItemNum = (Math.floor(Math.random()*(rangeEnd-rangeBegin+1)))+rangeBegin;
		var dynamicItemName = "item_"+dynamicItemNum;
		dynamicItemPath = myRoot;
		variable_Report("dynamic_Load","defined","rangeBegin,rangeEnd,selectionTotal");
		myRoot.attachMovie(dynamicItemName,"item_0",level++);
		item_0.myRoot = myRoot;
		function_Report("dynamic_Load","end",0);

	} else {

		//load static items
		function_Report("item_Load","begin",0);
		// attach items until no more found
		var flag = true;
		var counter = 0;
		helpClip.helpTextField.text += "item_Load while\r";
		while (flag == true) {
			itemName = "item_"+counter;
			myRoot.attachMovie(itemName,itemName,level++);
			var itemObject = item_Get(counter);
			itemObject.numberTextField.text = counter;
			itemObject._visible = false;
			itemObject._xscale = itemObject._yscale=100;
			itemObject.itemValueIndex = counter;
			itemObject.imageWidth = itemObject._width;
			itemObject.imageHeight = itemObject._height;
			var boundsObject = itemObject.getBounds(itemObject);
			itemObject.xMin = boundsObject.xMin;
			itemObject.xMax = boundsObject.xMax;
			itemObject.yMin = boundsObject.yMin;
			itemObject.yMax = boundsObject.yMax;
			if (pictureMode && subPicTotal>0) {
				itemObject.duplicateMovieClip("mini_"+counter,100+counter);
			}
			trace("coords: ["+itemObject.xMin+","+itemObject.xMax+"] ["+itemObject.yMin+","+itemObject.yMax+"]");
			if (hitAreaForced) {
				itemHitArea_Create(itemObject);
			}
			if (itemObject == null) {
				flag = false;
			} else {
				counter++;
			}
		}
		itemTotal = counter;
		variable_Report("item_Load","defined","itemTotal");
		function_Report("item_Load","end",0);




		rank_Select();// choose ranking method
		if (selectionArray == null) {
			item_Select();// choose items
		} else {
			selectionTotal = selectionArray.length;
			rankOrder_Prune();
		}
		itemLabels_Setup();
		if (cyclicMode) {
			cyclic_Setup();
			rankOrder_Cycle();
		}

		activity_LaunchEnd();// continue with launch
	}
	if (pictureMode) {
		picture_Setup();
	}



}

function activity_LaunchEnd() {
	rangeLabels_Display();// display the labels that describe the range

	instructions_Display();// display instructions

	if (pictureMode) {
		picture_Display();// position items
	}

	if (itemAreaFlexible) {
		itemArea_Set();// adjust itemArea to instructions length (and label size?)
	}

	item_Display();// position items

	if (locked) {
		feedback_Display();// show feedback if activity is locked
	}

	response_Set();// set response string


	trace("=========");
	trace("=========");
}

function activity_Reset() {
	function_Report("activity_Reset","begin",0);
	lesson_Remove();

	bigN.restart();

	for (var i = 0; i<itemTotal; i++) {
		var itemName = "item_"+i;
		var itemObject = eval(itemName);
		itemObject.removeMovieClip();
		trace(itemObject);
		//if (pictureMode && subPicTotal>0) {
		if (pictureMode) {
			var itemName = "mini_"+i;
			var itemObject = eval(itemName);
			itemObject.removeMovieClip();
			trace(itemObject);

		}
	}
	if (pictureMode && subPicTotal>0) {
		var picObject = eval("picture_"+x);
		var picObject1 = eval("myRoot.picture_0");
		trace(picObject);
		for (var i = 0; i<subPicTotal; i++) {
			var subpicItem = eval("subPicture_"+i);
			trace(subpicItem);
			subpicItem.removeMovieClip();
			trace(subpicItem);
			var subpicItem = eval("myRoot.picture_0.subPicture_"+i);
			trace(subpicItem);
			subpicItem.removeMovieClip();
			trace(subpicItem);
		}
		picObject.removeMovieClip();
		picObject1.removeMovieClip();

	}
	for (var i = 0; i<selectionTotal; i++) {
		var rankName = "rankNum_"+i;
		var rankObject = eval(rankName);
		rankObject.removeTextField();
	}
	for (var i = 0; i<selectionTotal; i++) {
		var rankName = "equivButton_"+i;
		var rankObject = eval(rankName);
		rankObject.removeTextField();
		if(i!=0)
		{
			rankObject.removeMovieClip();
		}
	}
	grademeButton._visible = true;
	tryagainButtonClip._visible = false;
	response = null;
	locked = null;
	function_Report("activity_Reset","end",0);

	activity_LaunchBegin();
}

function alg_Hide() {
	algDescription._visible = false;
	lock_Toggle(false,10000,0);
}

function array_Choose(inputArray, chooseTotal) {
	trace("inputArray: "+inputArray);
	trace("chooseTotal: "+chooseTotal);
	var tempArray = [];
	for (var i = 0; i<inputArray.length; i++) {
		tempArray.splice(Math.floor(Math.random()*(i+1)),0,inputArray[i]);
	}
	trace("tempArray: "+tempArray);
	return tempArray.slice(0, chooseTotal);
}

function array_Reduce(inputArray) {
	trace("reducing: "+inputArray);
	inputArray.sort();
	var flag = true;
	var counter = 0;
	while (flag) {
		var flagCompare = (inputArray[counter] == inputArray[counter+1]);
		inputArray.splice(counter,flagCompare);
		counter = counter+(not flagCompare);
		flag = (counter<inputArray.length);
	}
	trace("reduced to: "+inputArray);
	return inputArray;
}

function bigN_Activate() {
	getURL("http://astro.unl.edu", "_blank");
}

function clipboard_Copy() {
	var qu_TopicNameFinal = clipboardClip.topicnameTextField.text;
	var qu_TopicNumFinal = clipboardClip.topicnumTextField.text;
	var qu_QuestionNameFinal = clipboardClip.questionnameTextField.text;
	var qu_QuestionNumFinal = clipboardClip.questionnumTextField.text;
	var qu_PathFinal = clipboardClip.pathTextField.text;
	var lineBreak = String.fromCharCode(13)+String.fromCharCode(10);
	var clipboardTextTemp = "";
	if (Number(qu_QuestionNumFinal) == 1) {
		clipboardTextTemp += "qu."+qu_TopicNumFinal+".topic="+qu_TopicNameFinal+"@"+lineBreak+lineBreak;
	}
	clipboardTextTemp += "qu."+qu_TopicNumFinal+"."+qu_QuestionNumFinal+".name="+qu_QuestionNameFinal+"@"+lineBreak;
	clipboardTextTemp += "qu."+qu_TopicNumFinal+"."+qu_QuestionNumFinal+".movie=http://"+qu_PathFinal+"@"+lineBreak;
	clipboardTextTemp += "qu."+qu_TopicNumFinal+"."+qu_QuestionNumFinal+".mode=Flash@"+lineBreak;
	clipboardTextTemp += "qu."+qu_TopicNumFinal+"."+qu_QuestionNumFinal+".width="+Stage.width+"@"+lineBreak;
	clipboardTextTemp += "qu."+qu_TopicNumFinal+"."+qu_QuestionNumFinal+".height="+Stage.height+"@"+lineBreak;
	clipboardTextTemp += "qu."+qu_TopicNumFinal+"."+qu_QuestionNumFinal+".answer=answer@"+lineBreak;
	clipboardTextTemp += "qu."+qu_TopicNumFinal+"."+qu_QuestionNumFinal+".grading=client@"+lineBreak;
	for (var i = 0; i<clipboardArray.length; i++) {
		trace(clipboardArray[i].varName+"="+clipboardArray[i].varValue);
		if ((clipboardArray[i].varName.split("_")[0]<>"qu") and (clipboardArray[i].varName.substr(0, 6).toLowerCase()<>"myroot")) {
			clipboardTextTemp += "qu."+qu_TopicNumFinal+"."+qu_QuestionNumFinal+".param."+clipboardArray[i].varName+"="+clipboardArray[i].varValue+"@"+lineBreak;
		}
	}
	clipboardTextTemp += lineBreak;
	var clipboardText = "";
	for (var i = 0; i<clipboardTextTemp.length; i++) {
		if (clipboardTextTemp.charAt(i)<>"\\") {
			clipboardText += clipboardTextTemp.charAt(i);
		}
	}
	System.setClipboard(clipboardText);
	clipboardClip.removeMovieClip();
}

function clipboard_Options() {
	lock_Toggle(true,80000,50);
	var clipboardLevel = 90000;
	var numT = 1;
	var numQ = 1;
	myRoot.createEmptyMovieClip("clipboardClip",clipboardLevel++);
	clipboardClip.beginFill(0xFFFFFF,100);
	clipboardClip.lineStyle(1,0x000000,100);
	clipboardClip.moveTo(0,0);
	clipboardClip.lineTo(525,0);
	clipboardClip.lineTo(525,160);
	clipboardClip.lineTo(0,160);
	clipboardClip.endFill();

	clipboardClip.createTextField("topicnamelabelTextField",clipboardLevel++,20,10,100,20);
	clipboardClip.topicnamelabelTextField.text = "TOPIC NAME:";
	clipboardClip.topicnamelabelTextField.setTextFormat(clipboardlabelFormat);
	clipboardClip.topicnamelabelTextField.embedFonts = true;
	clipboardClip.topicnamelabelTextField.selectable = false;
	clipboardClip.topicnamelabelTextField.autoSize = "right";

	clipboardClip.createTextField("topicnamewarningTextField",clipboardLevel++,30,30,400,20);
	clipboardClip.topicnamewarningTextField.text = "TOPIC NAME will NOT be copied to clipboard when QUESTION NUM is greater than 1";
	clipboardClip.topicnamewarningTextField.selectable = false;
	clipboardClip.topicnamewarningTextField.setTextFormat(clipboardwarningFormat);
	clipboardClip.topicnamewarningTextField.embedFonts = true;

	clipboardClip.createTextField("topicnameTextField",clipboardLevel++,clipboardClip.topicnamelabelTextField._x+clipboardClip.topicnamelabelTextField._width+10,clipboardClip.topicnamelabelTextField._y,200,20);
	clipboardClip.topicnameTextField.border = true;
	clipboardClip.topicnameTextField.type = "input";
	clipboardClip.topicnameTextField.maxChars = 40;
	clipboardClip.topicnameTextField.text = qu_TopicName;
	clipboardClip.topicnameTextField.setTextFormat(clipboardinputFormat);
	clipboardClip.topicnameTextField.embedFonts = true;
	Selection.setFocus("clipboardClip.topicnameTextField");
	Selection.setSelection(0,0);
	clipboardClip.topicnameTextField.tabIndex = 1;

	clipboardClip.createTextField("topicnumlabelTextField",clipboardLevel++,clipboardClip.topicnameTextField._x+clipboardClip.topicnameTextField._width+20,clipboardClip.topicnameTextField._y,100,20);
	clipboardClip.topicnumlabelTextField.text = "TOPIC NUM:";
	clipboardClip.topicnumlabelTextField.setTextFormat(clipboardlabelFormat);
	clipboardClip.topicnumlabelTextField.embedFonts = true;
	clipboardClip.topicnumlabelTextField.selectable = false;
	clipboardClip.topicnumlabelTextField.autoSize = "right";

	clipboardClip.createTextField("topicnumTextField",clipboardLevel++,clipboardClip.topicnumlabelTextField._x+clipboardClip.topicnumlabelTextField._width+10,clipboardClip.topicnumlabelTextField._y,30,20);
	clipboardClip.topicnumTextField.border = true;
	clipboardClip.topicnumTextField.type = "input";
	clipboardClip.topicnumTextField.maxChars = 3;
	clipboardClip.topicnumTextField.text = qu_TopicNum;
	clipboardClip.topicnumTextField.setTextFormat(clipboardinputFormat);
	clipboardClip.topicnumTextField.embedFonts = true;
	Selection.setFocus("clipboardClip.topicnumTextField");
	Selection.setSelection(0,0);
	clipboardClip.topicnumTextField.tabIndex = 2;

	clipboardClip.createTextField("questionnamelabelTextField",clipboardLevel++,20,60,100,20);
	clipboardClip.questionnamelabelTextField.text = "QUESTION NAME:";
	clipboardClip.questionnamelabelTextField.setTextFormat(clipboardlabelFormat);
	clipboardClip.questionnamelabelTextField.embedFonts = true;
	clipboardClip.questionnamelabelTextField.selectable = false;
	clipboardClip.questionnamelabelTextField.autoSize = "right";

	clipboardClip.createTextField("questionnameTextField",clipboardLevel++,clipboardClip.questionnamelabelTextField._x+clipboardClip.questionnamelabelTextField._width+10,clipboardClip.questionnamelabelTextField._y,200,20);
	clipboardClip.questionnameTextField.border = true;
	clipboardClip.questionnameTextField.type = "input";
	clipboardClip.questionnameTextField.maxChars = 40;
	clipboardClip.questionnameTextField.text = qu_QuestionName;
	clipboardClip.questionnameTextField.setTextFormat(clipboardinputFormat);
	clipboardClip.questionnameTextField.embedFonts = true;
	Selection.setFocus("clipboardClip.questionnameTextField");
	Selection.setSelection(0,0);
	clipboardClip.questionnameTextField.tabIndex = 3;

	clipboardClip.createTextField("questionnumlabelTextField",clipboardLevel++,clipboardClip.questionnameTextField._x+clipboardClip.questionnameTextField._width+20,clipboardClip.questionnameTextField._y,100,20);
	clipboardClip.questionnumlabelTextField.text = "QUESTION NUM:";
	clipboardClip.questionnumlabelTextField.setTextFormat(clipboardlabelFormat);
	clipboardClip.questionnumlabelTextField.embedFonts = true;
	clipboardClip.questionnumlabelTextField.selectable = false;
	clipboardClip.questionnumlabelTextField.autoSize = "right";

	clipboardClip.createTextField("questionnumTextField",clipboardLevel++,clipboardClip.questionnumlabelTextField._x+clipboardClip.questionnumlabelTextField._width+10,clipboardClip.questionnumlabelTextField._y,30,20);
	clipboardClip.questionnumTextField.border = true;
	clipboardClip.questionnumTextField.type = "input";
	clipboardClip.questionnumTextField.maxChars = 3;
	clipboardClip.questionnumTextField.text = qu_QuestionNum;
	clipboardClip.questionnumTextField.setTextFormat(clipboardinputFormat);
	clipboardClip.questionnumTextField.embedFonts = true;
	Selection.setFocus("clipboardClip.questionnumTextField");
	Selection.setSelection(0,0);
	clipboardClip.questionnumTextField.tabIndex = 4;

	clipboardClip.createTextField("pathlabelTextField",clipboardLevel++,20,90,100,20);
	clipboardClip.pathlabelTextField.text = "EDU PATH:";
	clipboardClip.pathlabelTextField.setTextFormat(clipboardlabelFormat);
	clipboardClip.pathlabelTextField.embedFonts = true;
	clipboardClip.pathlabelTextField.selectable = false;
	clipboardClip.pathlabelTextField.autoSize = "right";

	myURL = myRoot._url.split("/");
	myURL = unescape(myURL[myURL.length-1]);

	clipboardClip.createTextField("pathTextField",clipboardLevel++,clipboardClip.pathlabelTextField._x+clipboardClip.pathlabelTextField._width+10,clipboardClip.pathlabelTextField._y,360,20);
	clipboardClip.pathTextField.border = true;
	clipboardClip.pathTextField.type = "input";
	clipboardClip.pathTextField.maxChars = 200;
	clipboardClip.pathTextField.text = qu_QuestionPath+myURL;
	clipboardClip.pathTextField.setTextFormat(clipboardinputFormat);
	clipboardClip.pathTextField.embedFonts = true;
	Selection.setFocus("clipboardClip.pathTextField");
	Selection.setSelection(0,0);
	clipboardClip.pathTextField.tabIndex = 5;

	Selection.setFocus(null);

	clipboardClip.createEmptyMovieClip("copyButton",clipboardLevel++);
	clipboardClip.copyButton.createEmptyMovieClip("buttonBackground",clipboardLevel++);
	clipboardClip.copyButton.buttonBackground.beginFill(0xDDDDDD,100);
	clipboardClip.copyButton.buttonBackground.lineStyle(1,0x000000,0);
	clipboardClip.copyButton.buttonBackground.moveTo(0,0);
	clipboardClip.copyButton.buttonBackground.lineTo(360,0);
	clipboardClip.copyButton.buttonBackground.lineTo(360,25);
	clipboardClip.copyButton.buttonBackground.lineTo(0,25);
	clipboardClip.copyButton.buttonBackground.endFill();

	clipboardClip.copyButton.createTextField("buttonlabelTextField",clipboardLevel++,0,0,100,20);
	clipboardClip.copyButton.buttonlabelTextField.selectable = false;
	clipboardClip.copyButton.buttonlabelTextField.text = "COPY TO CLIPBOARD";
	clipboardClip.copyButton.buttonlabelTextField.setTextFormat(pagenumFormat);
	clipboardClip.copyButton.buttonlabelTextField.embedFonts = true;
	clipboardClip.copyButton.buttonlabelTextField.autoSize = true;
	clipboardClip.copyButton.buttonlabelTextField._x = (clipboardClip.copyButton._width-clipboardClip.copyButton.buttonlabelTextField._width)/2;
	clipboardClip.copyButton.buttonlabelTextField._y = ((clipboardClip.copyButton._height-clipboardClip.copyButton.buttonlabelTextField._height)/2)-2;
	clipboardClip.copyButton._x = (clipboardClip._width-clipboardClip.copyButton._width)/2;
	clipboardClip.copyButton._y = clipboardClip.pathTextField._y+clipboardClip.pathTextField._height+20;

	clipboardClip.copyButton.onRollOver = function() {
		this.buttonColor = new Color(this.buttonBackground);
		this.buttonColor.setRGB(0xFFFF00);
	};
	clipboardClip.copyButton.onRollOut = function() {
		this.buttonColor = new Color(this.buttonBackground);
		this.buttonColor.setRGB(0xDDDDDD);
	};
	clipboardClip.copyButton.onRelease = function() {
		myRoot.clipboard_Copy();
		myRoot.lock_Toggle(false);
	};
	clipboardClip.copyButton.tabEnabled = false;
	clipboardClip._x = (Stage.width-clipboardClip._width)/2;
	clipboardClip._y = (Stage.height-clipboardClip._height)/2;
}

function clipboard_Setup() {
	function_Report("clipboard_Setup","begin",0);
	var clipboardArrayTemp = new Array();
	var counter = 0;
	for (name in myRoot) {
		clipboardArrayTemp.unshift({varName:name, varValue:eval(name)});
		var varValue = null;
		if (name == "lessonMode") {
			varValue = "false";
		}
		if (name == "eduMode") {
			varValue = "true";
		}
		if (varValue<>null) {
			clipboardArrayTemp[0].varValue = varValue;
		}
		counter++;
		if (name == "eduMode") {
			break;
		}
	}
	clipboardArray = clipboardArrayTemp;

	function_Report("clipboard_Setup","end",0);
}

// setup for cyclic
function cyclic_Setup() {
	function_Report("cyclic_Setup","begin",0);
	if (cyclicStart == null) {
		if (dynamicMode) {
			cyclicStart = Math.floor(Math.random()*itemValues.length);
			trace("itemValues:"+itemValues.length+itemValues);
		} else {
			cyclicStart = Math.floor(Math.random()*itemTotal);
		}
		if(equivMode)
		{
			cyclicStart = Math.floor(Math.random()*equivCyclicValues.length);
			trace("equivitemValues:"+equivCyclicValues.length+equivCyclicValues);
		}
	}
	variable_Report("cyclic_Setup","defined","cyclicStart");
	function_Report("cyclic_Setup","end",0);
}

// returns false if dataInput is "nothing" -- "", null, or undefined
function data_Test(dataObject) {
	if ((dataObject == "") or (dataObject == null) or (dataObject == undefined) or (dataObject == "false") or (dataObject == false) or (dataObject == 0) or (dataObject == "0")) {
		return false;
	} else {
		return true;
	}
}

// find dragObject's position, where 0 is leftmost item, 1 is second item from left, etc.
function dragPosition_Get(dragObject) {
	for (var i = 0; i<dragPositionArray.length; i++) {
		var directionMult = (dragPositionOld>i) ? 1 : -1;
		var threshhold = (dragObject.itemWidthScaled+itemSpacingFinal)/4;
		trace("threshhold #1:"+threshhold);
		if (dragObject._x<(dragPositionArray[i]._x+(directionMult*threshhold))) {
			break;
		}
	}
	return i;
}

// record positions of undragged items
function dragPosition_Set(dragObject) {
	dragPositionArray = new Array();
	for (var i = 0; i<selectionTotal; i++) {
		var itemObject = item_Get(selectionArray[i]);
		if (itemObject<>dragObject) {
			dragPositionArray.push(itemObject);
		}
	}
}

function drag_Process(dragObject) {
	dragPosition_Set(dragObject);
	var dragPosition = dragPosition_Get(dragObject);
	if ((dragPosition<>dragPositionOld)) {
		// if position has changed, change drag item's position in selectionArray
		if (dragPositionOld<>null) {
			var dragNum = selectionArray[dragPositionOld];
			selectionArray.splice(dragPositionOld,1);
			dragPositionOld = dragPosition;
			selectionArray.splice(dragPosition,0,dragNum);
			// when dragPosition changes, move displaced item to new location
			item_RepositionSetup(dragObject);
		} else {
			dragPositionOld = dragPosition;
		}
	}
}

function drag_Start(dragObject) {
	function_Report("drag_Start","begin",1);
	flagDragging = true;
	if ((flagShiftDown) and (manipulationMode)) {
		trace("start dragging component");
		componentObject.startDragging();
	} else {
		if (manipulationMode) {
			componentObject.stopDragging();
		}
		dragObject.swapDepths(level++);
		if (dragObject.newX == null) {
			dragObject.newX = dragObject._x;
		}
		dragObject.startDrag(false,0,dragObject._y,itemArea._width,dragObject._y);
		item_Fade(dragObject,true);
		// record positions of undragged items
		dragPosition_Set(dragObject);
		dragPositionOld = dragPosition_Set(dragObject);
		// compare position of dragged item to undragged items, stop when to left of item
		dragObject.onEnterFrame = function() {
			drag_Process(this);
		};
	}
	function_Report("drag_Start","end",1);
}

function drag_Stop(dragObject) {
	function_Report("drag_Stop","begin",1);
	trace("flagShiftDown: "+flagShiftDown);
	trace("manipulationMode: "+manipulationMode);
	if (flagShiftDown and manipulationMode) {
		componentObject.stopDragging();
		item_0.items_Update();
	} else {
		dragObject.stopDrag();
		delete dragObject.onEnterFrame;
		if ((dragObject.newX<>null) and (Math.abs(dragObject._x-dragObject.newX)>itemDeltaX)) {
			dragObject.directionMult = (dragObject._x<dragObject.newX) ? 1 : -1;
			dragObject.onEnterFrame = function() {
				item_Reposition(this);
			};
		} else {
			dragObject._x = dragObject.newX;
		}
		item_Fade(dragObject,false);
	}
	flagDragging = false;
	response_Set();
	variable_Report("drag_Stop","defined","response");
	function_Report("drag_Stop","end",1);
}

function draw_Circle(mc, x, y, r) {
	mc.moveTo(x+r,y);
	mc.curveTo(r+x,Math.tan(Math.PI/8)*r+y,Math.sin(Math.PI/4)*r+x,Math.sin(Math.PI/4)*r+y);
	mc.curveTo(Math.tan(Math.PI/8)*r+x,r+y,x,r+y);
	mc.curveTo(-Math.tan(Math.PI/8)*r+x,r+y,-Math.sin(Math.PI/4)*r+x,Math.sin(Math.PI/4)*r+y);
	mc.curveTo(-r+x,Math.tan(Math.PI/8)*r+y,-r+x,y);
	mc.curveTo(-r+x,-Math.tan(Math.PI/8)*r+y,-Math.sin(Math.PI/4)*r+x,-Math.sin(Math.PI/4)*r+y);
	mc.curveTo(-Math.tan(Math.PI/8)*r+x,-r+y,x,-r+y);
	mc.curveTo(Math.tan(Math.PI/8)*r+x,-r+y,Math.sin(Math.PI/4)*r+x,-Math.sin(Math.PI/4)*r+y);
	mc.curveTo(r+x,-Math.tan(Math.PI/8)*r+y,r+x,y);
}

// retrieves dynamicString portion of response and converts it to an array
function dynamicParamArray_Construct(dynamicParamArray) {

	function_Report("dynamicParamArray_Construct","begin",2);
	trace("dynamicParamArray: "+dynamicParamArray);
	trace("dynamicParamArray.length: "+dynamicParamArray.length);
	if (dynamicParamArray<>null) {
		for (var i = 0; i<dynamicParamArray.length; i++) {
			dynamicParamArray[i] = dynamicParamArray[i].split(responsedelim_0);
			if (dynamicParamArray[i].length>0) {
				for (var j = 0; j<dynamicParamArray[i].length; j++) {
					if (dynamicParamArray[i][j]=String(Number(String(dynamicParamArray[i][j])))) {
						dynamicParamArray[i][j] = Number(dynamicParamArray[i][j]);
					}
				}
			} else {
				if (dynamicParamArray[i]=String(Number(String(dynamicParamArray[i])))) {
					dynamicParamArray[i] = Number(dynamicParamArray[i]);
				}
			}
			trace("dynamicParamArray[i]: "+dynamicParamArray[i]);
			//if (dynamicPararmArray[i][0] == null) {
			//var dynamicParamArrayTemp = dynamicParamArray[i];
			//dynamicParamArray[i] = new Array();
			//dynamicParamArray[i].push(dynamicParamArrayTemp);
			//}
		}
	}


	function_Report("dynamicParamArray_Construct","end",2);
	return dynamicParamArray;
}

function rankToEquiv() {
	equivOrder = new Array();
	trace("equivOrder: "+equivOrder);
	//Convert to equivOrder format [object]=rank rather than [rank]=object
	for (var i = 0; i<rankOrder.length; i++) {
		var temp0 = new Array();
		equivOrder[rankOrder[i]] = i;
	}
	trace("equivOrder: "+equivOrder);
	for (var i = 0; i<equivArray.length; i++) {
		var temp1 = new Array();
		trace("temp1: "+temp1);
		for (var j = 0; j<equivArray[i].length; j++) {
			temp1.push(equivOrder[equivArray[i][j]]);
			var argh = isNaN(temp1[j]);
			trace("argh: "+argh);
			trace("temp1: "+temp1);
			trace("equivOrder1: "+equivOrder);
		}
		temp1.sort();
		for (var k = 0; k<equivArray[i].length; k++) {
			equivOrder[equivArray[i][k]] = temp1;
			trace("equivOrder2: "+equivOrder);
			trace("temp1: "+temp1);
		}
	}
	return equivOrder;
}

function feedback_Display() {
	function_Report("feedback_Display","begin",0);
	variable_Report("feedback_Display","referenced","selectionTotal,selectionArray");
	//rationaleButtonClip._visible = false;
	for (var i = 0; i<selectionTotal; i++) {
		var itemObject = item_Get(selectionArray[i]);
		itemFeedback_Display(itemObject,i);
		var rankName = "rankNum_"+i;
		if (equivMode) {
			//Created right under the arrow line so that it doesn't move
			trace("arrowclip y: "+arrowClip._y);
			trace("arrowclip height: "+arrowClip._height);
			trace("itemObject y: "+itemObject._y);
			trace("itemObject ymin: "+itemObject.yMin);
			myRoot.createTextField(rankName,level++,itemObject._x,(arrowClip._y+arrowClip._height-20),50,20);
			if (i != (selectionTotal-1)) {
				rankNameEquiv = "rankEquiv_"+i;
				myRoot.createTextField(rankNameEquiv,level++,(itemObject._x+(itemObject._width/2)+5),(arrowClip._y+arrowClip._height-20),50,20);
				var rankObjectEquiv = eval(rankNameEquiv);
				trace("rankObject ymin: "+rankObjectEquiv);
			}
		} else {
			myRoot.createTextField(rankName,level++,itemObject._x,(itemObject._y+itemObject.yMin-25),50,20);
		}
		var rankObject = eval(rankName);
		rankObject.embedFonts = true;
		rankObject.selectable = false;
		for (var j = 0; j<selectionTotal; j++) {
			if (selectionArray[i] == rankOrder[j]) {
				break;
			}
		}
		//The rank that appears on the screen!
		if (equivMode) {
			if (cyclicMode) {

				////////////////////////////start here!!! this is not right
				//rankObject.text = equivOrder[rankOrder[selectionArray[i]]][0]+1;
				rankObject.text = equivOrder[selectionArray[i]][0]+1;
				//rankObject.text = rankOrder[selectionArray[i]]+1;
			} else {
				rankObject.text = equivOrder[selectionArray[i]][0]+1;
			}
			trace("rankObject.text: "+rankObject.text);
			/*if ((equivButtonSelect[i] != undefined && equivButtonSelect[i] != equivButtonArray[i]) || (equivButtonSelect[i] == undefined && equivButtonArray[i] == 1)) {
				trace("equivButton: "+equivButtonSelect[i]+equivButtonArray[i]);
				equivButton = eval("equivButton_"+i);
				var itemColor = new Color(equivButton.equivColor);
				itemColor.setRGB(16711680);
			}*/
		if (correctArray[selectionArray[i]]) {
			var colorName = "0x"+colorSchemeObject.colorTextHighlight3;
			var rankColor = new Color(rankObject);
			rankColor.setRGB(colorName);
		} else {
			var colorName = "0x"+colorSchemeObject.colorTextHighlight1;
			var rankColor = new Color(rankObject);
			rankColor.setRGB(colorName);
		}

		} else {
			rankObject.text = (j+1);
		if (i == j) {
			var colorName = "0x"+colorSchemeObject.colorTextHighlight3;
			var rankColor = new Color(rankObject);
			rankColor.setRGB(colorName);
		} else {
			var colorName = "0x"+colorSchemeObject.colorTextHighlight1;
			var rankColor = new Color(rankObject);
			rankColor.setRGB(colorName);
		}

		}
		rankObject.setTextFormat(rankFormat);
		rankObject.autoSize = "center";
		rankObject._x = itemObject._x-(rankObject._width/2);
		trace("RANKOBJECT @ "+rankObject._x+","+rankObject._y);
	}
trace("ranknum"+rankNum+stageMode+sameStage+prevRankNum);
	function_Report("feedback_Display","end",0);
}


function stageButton_functions() {
		if(termPerStage==undefined) termPerStage=2;

		trace("termPerStage"+termPerStage);
		nextstageButtonClip.swapDepths(15000+level++);
		nextstageButtonClip.select_0.onRelease = nextstageButtonClip.select_0.onReleaseOutside=function () {
			sameStage = true;
			rankNum = 0;
			prevRankNum =0;
			activity_Reset();
		};

		nextstageButtonClip.select_1.onRelease = nextstageButtonClip.select_1.onReleaseOutside=function () {
			sameStage = true;
			rankNum = termPerStage;
			prevRankNum =termPerStage;
			activity_Reset();
		};

		nextstageButtonClip.select_2.onRelease = nextstageButtonClip.select_2.onReleaseOutside=function () {
			sameStage = true;
			rankNum = termPerStage*2;
			prevRankNum =termPerStage*2;
			activity_Reset();
		};
		stageGraph.select_0.onRelease = stageGraph.select_0.onReleaseOutside=function () {
			sameStage = true;
			rankNum = 0;
			prevRankNum =0;
			activity_Reset();
		};

		stageGraph.select_1.onRelease = stageGraph.select_1.onReleaseOutside=function () {
			sameStage = true;
			rankNum = termPerStage;
			prevRankNum =termPerStage;
			activity_Reset();
		};

		stageGraph.select_2.onRelease = stageGraph.select_2.onReleaseOutside=function () {
			sameStage = true;
			rankNum = termPerStage*2;
			prevRankNum = termPerStage*2;
			activity_Reset();
		};

}
function grade_Display() {
	lock_Toggle(true,10000,0);
	locked = true;
	grademeButton._visible = false;
	//lessonbuttonClip._visible = false;
	nextstageButtonClip._visible=true;
	stageButton_functions();
	trace("Find this");
	if (eduMode<>true) {
		tryagainButtonClip._visible = true;
		
		tryagainButtonClip.swapDepths(15003);

	}
	if (explanationMode) {
		rationalebuttonClip._visible = true;
		rationalebuttonClip.swapDepths(15004);
		rationalebuttonClip.gotoAndStop(2);
		rationalebuttonClip.tabEnabled = false;
	} else {
		rationalebuttonClip._visible = false;
	}
	myRoot.createTextField("gradeTextField",level++,0,0,50,20);
	gradeTextField = eval("myRoot.gradeTextField");
	gradeTextField.embedFonts = true;
	gradeTextField.multiline = true;
	gradeTextField.selectable = false;
	gradeTextField.text = "Your score is: "+(grade_Get()*100)+"%";
	gradeTextField.setTextFormat(instructionsFormat);
	var gradeColor = new Color(gradeTextField);
	gradeColor.setRGB(Number("0x"+colorSchemeObject.colorTextBody));
	gradeTextField.autoSize = "center";
	while (textWidth<>gradeTextField._width) {
		var textWidth = gradeTextField._width;
	}
	gradeTextField._x = (myRoot_width-gradeTextField._width)/2;
	gradeTextField._y = (explanationMode) ? rationalebuttonClip._y-gradeTextField._height : myRoot_height-gradeTextField._height-5;
	if (grade == 1) {
		bigN.pop();
	}
	feedback_Display();
}


function grade_Get() {
	function_Report("grade_Get","begin",1);
	correctArray = new Array(selectionArray.length);
	var numCorrect = 0;
	// for gradeOption == 1 or == 2, count number of items in correct order
	trace("RankOrder: "+rankOrder);
	trace("equivArray: "+equivArray);
	if (equivMode) {
		// Go through each of the 
		for (var i = 0; i<selectionTotal; i++) {
			if (equivOrder[selectionArray[i]][0] == i) {
				numCorrect++;
				correctArray[selectionArray[i]] = true;
				trace("numCorrect: "+numCorrect);
			} else if (equivOrder[selectionArray[i]].length>1) {
				for (var j = 1; j<equivOrder[selectionArray[i]].length; j++) {
					if (equivOrder[selectionArray[i]][j] == i) {
						numCorrect++;
						correctArray[selectionArray[i]] = true;
						trace("numCorrect: "+numCorrect);
					}

				}
			}
			if (i<selectionTotal-1) {
				if (equivButtonSelect[i] == equivButtonArray[i] || (equivButtonSelect[i] == undefined && equivButtonArray[i] == 0)) {
					numCorrect = numCorrect+ifequivCorrect;
					trace("numCorrect: "+numCorrect+equivButtonSelect[i]+equivButtonArray[i]);
				} else {
					numCorrect = numCorrect-ifequivWrong;
					trace("numCorrect: "+numCorrect+equivButtonSelect[i]+equivButtonArray[i]);
				}
			}

		}
	}
	if (gradeOption<=3) {

		if (!equivMode) {
			for (var i = 0; i<selectionTotal; i++) {
				if (selectionArray[i] == rankOrder[i]) {
					numCorrect++;
				}
			}
		}
		trace("numCorrect: "+numCorrect);
		trace("selectionTotal: "+selectionTotal);
		// for gradeOption == 1, all items must be in correct order for credit
		if (gradeOption == 1) {
			function_Report("grade_Get","end",1);
			return Number(numCorrect == selectionTotal);
			// for gradeOption == 2, credit based on percentage of items in correct order
		} else if (gradeOption == 2) {
			function_Report("grade_Get","end",1);
			return math_computeFixedDigits((numCorrect/selectionTotal), 3);
		} else if (gradeOption == 3) {
			for (var i = 0; i<selectionTotal; i++) {
				if ((selectionArray[i] == rankOrder[i-1]) or (selectionArray[i] == rankOrder(i+1))) {
					numCorrect = numCorrect+0.5;
				}
			}
			function_Report("grade_Get","end",1);
			return math_computeFixedDigits((numCorrect/selectionTotal), 3);
		}
	} else if (gradeOption == 4) {
		//********************Holistic Grading Algorithm********************//
		//The algorithm will find each item and then search all items on    //
		//either side of the item to accumulate points.                     //
		//If equivMode, then check to see if the one directly to one side   //
		//or another is equal and if the button is set correctly            //
		numCorrect = 0;
		equivCorrect = 0;
		equivFound = 0;
		trace("numCorrect1: "+numCorrect);
		var addedAlready = false;

		//check the equiv buttons
		if (equivMode) {
			for (var i = 0; i<selectionTotal-1; i++) {
				equivCorrect += equivButtonArray[i];
				//equivFound += equivButtonSelect[i];
				trace("numEquivCorrect: "+equivCorrect);
			}
			//if (equivCorrect>0 || equivFound>0) {
			for (var i = 0; i<selectionTotal-1; i++) {
				//i = current selection of rank
				//j = place in rankOrder
				trace("equiv & selection Array: "+equivOrder[selectionArray[i]][0]+equivOrder[selectionArray[i+1]][0]);
				trace("equiv & selection Array: "+i+selectionArray[i]+selectionArray[i+1]+i);
				trace("selection Array: "+selectionArray);
				//if (equivOrder[selectionArray[i]][0] == equivOrder[rankOrder[j+1]][0]) {
				if (equivOrder[selectionArray[i]][0] == equivOrder[selectionArray[i+1]][0]) {
					if (equivButtonSelect[i] == 0 || equivButtonSelect[i] == undefined) {
						numCorrect = numCorrect-ifequivWrong;
						//equivCorrect++;
						trace("numEquiv1: "+numCorrect);
					} else {
						numCorrect = numCorrect+ifequivCorrect;
						//equivCorrect--;
						trace("numEquiv2: "+numCorrect);
					}
					equivFound++;
					trace("numFound: "+equivFound);
				} else {
					if (equivButtonSelect[i] == 1) {
						numCorrect = numCorrect-ifequivWrong;
						trace("numEquiv3: "+numCorrect);
					} else {
						numCorrect = numCorrect+ifequivCorrect;
						trace("numEquiv4: "+numCorrect);
					}
				}
				//}
			}
			if (equivCorrect>equivFound) {
				numCorrect = numCorrect-(equivCorrect-equivFound);
				trace("numFound: "+equivFound);
				trace("numEquivCorrect: "+equivCorrect);
				trace("numEquiv5: "+numCorrect);
			}
		}
		// Run through all the ranks to count correct       
		// The overall loops to run through all ranks
		for (var i = 0; i<selectionTotal; i++) {
			//Compare the item # at each rank   
			//Looking at the item # at rank i of selectionArray[i] and rankOrder[j]
			//So if Rank 0 of selectionArray is item # 3 then it searches through the correct rankOrder until it finds it
			//if equal then break from this loop and continue
			//Item Number is held in both Arrays at the i rank...
			trace("selection Array: "+selectionArray+i);
			for (var j = 0; j<selectionTotal; j++) {
				trace("i,j,s,r: "+i+j+selectionArray[i]+rankOrder[j]);
				if (selectionArray[i] == rankOrder[j]) {
					break;
				}
			}
			//Compare all the ranks before i using item # for default               
			//i2 goes from 0 to i and j2 goes from 0 to j+1
			//if one of the items matches the item # of the correct item # then it will be counted
			for (var i2 = 0; i2<i; i2++) {
				for (var j2 = 0; j2<(j+1); j2++) {
					if (equivMode) {
						for (var k = 0; k<equivOrder[rankOrder[j2]].length; k++) {
							//compares the rank rather than item number
							if (!addedAlready) {
								numCorrect += (equivOrder[selectionArray[i2]][0] == equivOrder[rankOrder[j2]][k]);
								addedAlready = (equivOrder[selectionArray[i2]][0] == equivOrder[rankOrder[j2]][k]);
							}
							trace("i,j,i2,j2,k: "+i+j+i2+j2+k);
							trace("numCorrect2: "+numCorrect);
						}
					} else {
						numCorrect += (selectionArray[i2] == rankOrder[j2]);
					}
					trace("numCorrect7: "+numCorrect);
				}
				addedAlready = false;
				trace("numCorrect8: "+numCorrect);
			}
			trace("numCorrect9: "+numCorrect);
			//Compare all the ranks after i using item # for default
			for (var i2 = (i+1); i2<selectionTotal; i2++) {
				for (var j2 = (j); j2<selectionTotal; j2++) {
					if (equivMode) {
						for (var k = 0; k<equivOrder[rankOrder[j2]].length; k++) {
							if (!addedAlready) {
								numCorrect += (equivOrder[selectionArray[i2]][0] == equivOrder[rankOrder[j2]][k]);
								addedAlready = (equivOrder[selectionArray[i2]][0] == equivOrder[rankOrder[j2]][k]);
							}
							trace("i,j,i2,j2,k: "+i+j+i2+j2+k);
							trace("numCorrect3: "+numCorrect);
						}
					} else {
						numCorrect += (selectionArray[i2] == rankOrder[j2]);
						trace("numCorrect4: "+numCorrect);
					}
				}
				addedAlready = false;
				trace("numCorrect5: "+numCorrect);
			}
			trace("numCorrect6: "+numCorrect);
		}

		trace("numCorrect7: "+numCorrect);
		trace("selectionTotal: "+selectionTotal);
		function_Report("grade_Get","end",1);
		grade = math_computeFixedDigits((numCorrect/(selectionTotal*(selectionTotal-1))), 3);
		return grade;
	}
}


// sets up so that on the release of grading info button the algorithm is displayed
//and the lock toggle is called to bring up the background cover
function gradinginfoButton_Setup() {
	gradinginfoButtonClip.gradinginfoButton.onRelease = function() {
		myRoot.algDescription._visible = true;
		// Creates an empty movie clip that covers 0->myroot size at lockAlpha
		// swap depths at lockLevel
		myRoot.lock_Toggle(true,20000,50);
	};
	gradinginfoButtonClip.gradinginfoButton.tabEnabled = false;
}

function instructions_Display() {
	function_Report("instructions_Display","begin",0);
	if (pictureMode) {
		picObject = eval("picture_0");

		if (lessonMode) {
			picObject._y = lessonbuttonClip._y+lessonbuttonClip._height+(picObject._height/2);
		} else {
			//picObject._y = instructionsTextField._y+instructionsTextField._height+(picObject._height/2);
			picObject._y = instructionsTextField._y+instructionsTextField._height+(picObject._height/2)+lessonbuttonClip._height;
		}
		PictureArea._height = picObject._height;

		if (pictureStyle == 1 || pictureStyle == 2) {
			trace("instructionTextField._width: "+instructionsTextField._width);
			//instructionsTextField._width = myRoot_width/2;
			//PictureArea._y = PictureArea._height/2;
			PictureArea._y = PictureArea._height/2;
			PictureArea._width = picObject._width;
			PictureArea._x = myRoot_width-(PictureArea._width/2);
			instructionsTextField._width = myRoot_width-picObject._width;
			lessonbuttonClip._width = instructionsTextField._width*4/5;
			lessonbuttonClip._x = lessonbuttonClip._width/2+(instructionsTextField._width/10);

		}
			//instructionsTextField._x = 0;
			//instructionTextField.removeTextField();
			//this.createTextField("instructionTextField", 0,0, 100, 20);
			trace("instructionTextField._width: "+instructionsTextField._width);
	}

	var instructionsTextTemp = instructionsText;
	instructionsArray = instructionsTextTemp.split("%");
	instructionsTextTemp = "";
	for (var i = 0; i<instructionsArray.length; i++) {
		if (Math.round(i/2)<>(i/2)) {
			var termNum = Number(instructionsArray[i]);
			var termString = termArray[termNum];
			trace("termString: "+termString);
			instructionsArray[i] = termString;
		}
		instructionsTextTemp += instructionsArray[i];
	}
	instructionsArray = instructionsTextTemp.split("$");
	instructionsTextTemp = "";
	for (var i = 0; i<instructionsArray.length; i++) {
		if (Math.round(i/2)<>(i/2)) {
			var colorNum = Number(instructionsArray[i]);
			var colorString = colorSchemeArray[colorNum];
			instructionsArray[i] = colorString;
		}
		instructionsTextTemp += instructionsArray[i];
	}
	instructionsTextField.htmlText = "<font color='#"+colorSchemeObject.colorTextBody+"'>"+instructionsTextTemp+"</font>";
	instructionsTextField.autoSize = "left";

	if (lessonMode) {
		lessonbuttonClip._y = instructionsTextField._y+instructionsTextField._height+(lessonbuttonClip._height/2);
	}

	//NEW//
	if (pictureStyle == 0) {
		PictureArea._y= lessonbuttonClip._y+ lessonbuttonClip._height+(PictureArea._height/2)-10;
	}
	function_Report("instructions_Display","end",0);
}

function manipulationMode_Display() {
	if (Key.isDown(Key.SHIFT)) {
		manipulationmodeFlag = true;
		manipulationModeClip.modeTextField.text = "Manipulating";
		manipulationModeClip.instructionsTextField.text = "Use mouse to manipulate items";
	} else {
		manipulationmodeFlag = false;
		manipulationModeClip.modeTextField.text = "Sorting";
		manipulationModeClip.instructionsTextField.text = "Hold SHIFT to manipulate";
	}
}

function item_Display() {
	function_Report("item_Display","begin",0);
	// compute spacing parameters
	var displayWidth = itemArea._width;
	var displayHeight = itemArea._height;
	var displayWidth_noSpacing = displayWidth-((selectionTotal-1)*itemSpacing);
	trace("displayWidth: "+displayWidth);
	trace("displayWidth_noSpacing: "+displayWidth_noSpacing);
	//var itemWidth = Math.floor(displayWidth_noSpacing/selectionTotal);
	//itemSpacing = Math.floor(displayWidth-(itemWidth*selectionTotal))/(selectionTotal-1);
	//find total width of items at initial size, find maximum height of items
	var itemsData = items_GetData(100);
	trace("itemsData.widthTotal: "+itemsData.widthTotal);
	var itemScaleWidth = displayWidth_noSpacing/itemsData.widthTotal;
	var itemScaleHeight = displayHeight/itemsData.heightMax;
	trace("itemScaleWidth: "+itemScaleWidth);
	trace("itemScaleHeight: "+itemScaleHeight);
	var tempScale = ((itemScaleWidth<itemScaleHeight) ? itemScaleWidth : itemScaleHeight)*100;
	trace("tempScale: "+tempScale);
	var itemScale = Math.floor(((itemScaleWidth<itemScaleHeight) ? itemScaleWidth : itemScaleHeight)*100);
	trace("itemScale: "+itemScale);
	itemsData = items_GetData(itemScale);
	trace("itemsData.widthTotal: "+itemsData.widthTotal);
	var scaleDelta = (itemsData.widthTotal<displayWidth_noSpacing) ? 1 : -1;
	trace("scaleDelta: "+scaleDelta);
	var flag = true;
	var counter = 0;
	helpClip.helpTextField.text += "item_Display while\r";
	while (flag) {
		counter++;
		itemsData = items_GetData(itemScale);
		trace("SCALE "+itemScale+"%: "+itemsData.widthTotal);
		if (scaleDelta == 1) {
			if ((itemsData.widthTotal>displayWidth_noSpacing) or (itemsData.heightMax>displayHeight)) {
				itemScale += -scaleDelta;
				flag = false;
			}
		} else {
			if ((itemsData.widthTotal<displayWidth_noSpacing) and (itemsData.heightMax<displayHeight)) {
				flag = false;
			}
		}
		if (flag) {
			itemScale += scaleDelta;
		}
		if (counter>100) {
			flag = false;
		}
	}
	helpClip.helpTextField.text += "item_Display counter: "+counter+"\r";

	helpClip.helpTextField.text += "SCALE: "+itemScale+"\r";
	helpClip.helpTextField.text += "scaleDelta: "+scaleDelta+"\r";
	helpClip.helpTextField.text += "widthTotal: "+itemsData.widthTotal+"\r";
	helpClip.helpTextField.text += "displayWidth: "+displayWidth_noSpacing+"\r";
	helpClip.helpTextField.text += "heightMax: "+itemsData.heightMax+"\r";
	helpClip.helpTextField.text += "displayHeight: "+displayHeight+"\r";

	itemsData = items_GetData(itemScale);
	itemSpacingFinal = Math.floor((displayWidth-itemsData.widthTotal)/(selectionTotal-1));
	trace("itemSpacingFinal: "+itemSpacingFinal);
	trace("*****termArray: "+termArray.length+termArray);
	// scale and space items, program
	var itemLeft = itemArea._x-(itemArea._width/2);
	trace("itemLeft: "+itemLeft);
	if (equivMode) {
		equivButton = eval("equivButton_0");
		equivButton.equivText.text1.text = termArray[termArray.length-1];
		equivButton.name = 0;
		equivButton.swapDepths(myRoot.level++);
		var itemColor = new Color(equivButton.equivColor);
		itemColor.setRGB(3368703);
		//itemColor.setRGB(16711680);
		for (var i = 1; i<selectionTotal-1; i++) {
			equivButton1 = item_Duplicate(equivButton, "equivButton_"+i);
			//trace("does it work"+equivButton1);
			equivButton1.equivText.text1.text = termArray[termArray.length-1];
			equivButton1.name = i;
			equivButton1.swapDepths(myRoot.level++);
		}
	}
	for (var i = 0; i<selectionTotal; i++) {
		itemObject = item_Get(selectionArray[i]);
		trace("itemObject: "+itemObject);
		//itemObject._alpha = 10;
		itemObject._xscale = itemObject._yscale=itemScale;
		var itemImageWidth = itemObject.imageWidth*(itemScale/100);
		var itemLabelWidth = itemObject.labelWidth;
		var itemImageHeight = itemObject.imageHeight*(itemScale/100);
		itemObject.itemWidthScaled = (itemImageWidth>itemLabelWidth) ? itemImageWidth : itemLabelWidth;
		itemObject.itemHeightScaled = itemImageHeight;
		itemObject.xMin *= (itemScale/100);
		itemObject.xMax *= (itemScale/100);
		itemObject.yMin *= (itemScale/100);
		itemObject.yMax *= (itemScale/100);
		itemObject._x = itemLeft+(itemObject.itemWidthScaled/2);
		itemObject._y = Math.round(itemArea._y);
		itemLabel_Display(itemObject,i);
		itemLeft += itemObject.itemWidthScaled+itemSpacingFinal;
		itemObject._visible = true;
		itemObject.onRollOver = function() {
			trace("roll over");
			trace("flagMouseDown: "+flagMouseDown);
			if (flagMouseDown<>true) {
				selectedObject = this;
				var componentNum = selectedObject._name.split("_")[1];
				var componentName = "selectedObject."+"component_"+componentNum;
				componentObject = eval(componentName);
				trace(componentObject);
			}
		};
		itemObject.onRollOut = function() {
			selectedObject = (selectedObject == this) ? null : selectedObject;
		};
		itemObject.onPress = function() {
			if (not manipulationmodeFlag) {
				drag_Start(this);
			}
		};
		itemObject.onRelease = itemObject.onReleaseOutside=function () {
			if (not manipulationmodeFlag) {
				drag_Stop(this);
			}
		};
		itemObject.tabEnabled = false;
		if (equivMode) {
			if (i<(selectionTotal-1)) {
				equivButton = eval("equivButton_"+i);
				equivButton._y = Math.round(itemArea._y);
				equivButton._x = itemLeft-(itemSpacingFinal/2);
				equivButton._visible = true;
				equivButton.onRollOver = function() {
					trace("roll over");
					trace("flagMouseDown: "+flagMouseDown);
					if (flagMouseDown<>true) {
						componentObject = this;
						trace("roll over"+selectedObject);
						//var componentNum = selectedObject._name.split("_")[1];
						//var componentName = "selectedObject."+"component_"+componentNum;
						//componentObject = eval(componentName);
						if (componentObject.equivText.text1.text == "=") {
							//componentObject.equivText.text1.text = termArray[termArray.length-1];
							componentObject.equivText.text1.text = termArray[termArray.length-1];

						} else {
							componentObject.equivText.text1.text = "=";
						}

						var itemColor = new Color(componentObject.equivColor);
						if (itemColor.getRGB() == 3407616) {
							itemColor.setRGB(3368703);
							//itemColor.setRGB(16711680);
						} else {
							itemColor.setRGB(3407616);
						}
						trace(componentObject);
					}
				};
				equivButton.onRollOut = function() {
					componentObject = this;
					if (not equivPressed) {
						if (componentObject.equivText.text1.text == "=") {
							componentObject.equivText.text1.text = termArray[termArray.length-1];
						} else {
							componentObject.equivText.text1.text = "=";
						}

						var itemColor = new Color(componentObject.equivColor);
						if (itemColor.getRGB() == 3407616) {
							itemColor.setRGB(3368703);
							//itemColor.setRGB(16711680);
						} else {
							itemColor.setRGB(3407616);
						}
					} else {
						equivPressed = false;
					}
				};
				equivButton.onPress = function() {
					componentObject = this;
					var objNum = componentObject.name;
					if (not manipulationmodeFlag) {
						if (equivPressed) {
							if (componentObject.equivText.text1.text == "=") {
								componentObject.equivText.text1.text = termArray[termArray.length-1];
							} else {
								componentObject.equivText.text1.text = "=";
							}

							var itemColor = new Color(componentObject.equivColor);
							if (itemColor.getRGB() == 3407616) {
								itemColor.setRGB(3368703);
								//itemColor.setRGB(16711680);
							} else {
								itemColor.setRGB(3407616);
							}
							if (equivButtonSelect[objNum] == undefined || equivButtonSelect[objNum] == 0) {
								equivButtonSelect[objNum] = 1;
							} else {
								equivButtonSelect[objNum] = 0;
							}
						} else {
							equivPressed = true;
							if (equivButtonSelect[objNum] == undefined || equivButtonSelect[objNum] == 0) {
								equivButtonSelect[objNum] = 1;
							} else {
								equivButtonSelect[objNum] = 0;
							}
						}

					}
				};
				equivButton.onRelease = equivButton.onReleaseOutside=function () {
					if (not manipulationmodeFlag) {
					}
				};
				equivButton.tabEnabled = false;
			}
		}
	}

	if(stageMode)
	{

		stageButton_functions()
		/*
		stageGraph.select_0.onRelease = stageGraph.select_0.onReleaseOutside=function () {
			sameStage = true;
			rankNum = 0;
			prevRankNum =0;
			activity_Reset();
		};

		stageGraph.select_1.onRelease = stageGraph.select_1.onReleaseOutside=function () {
			sameStage = true;
			rankNum = 2;
			prevRankNum =2;
			activity_Reset();
		};

		stageGraph.select_2.onRelease = stageGraph.select_2.onReleaseOutside=function () {
			sameStage = true;
			rankNum = 4;
			prevRankNum =4;
			activity_Reset();
		};
		*/
	}

	//set correct x,y position for all items
	var itemLeft = itemArea._x-(itemArea._width/2);
	trace("selectionArray: "+selectionArray);
	trace("rankOrder: "+rankOrder);
	for (var i = 0; i<selectionTotal; i++) {
		itemObject = item_Get(rankOrder[i]);
		itemObject.correctX = itemLeft+(itemObject.itemWidthScaled/2);
		itemObject.correctY = Math.round(itemArea._y);
		itemLeft += itemObject.itemWidthScaled+itemSpacingFinal;
		trace(itemObject._x+","+itemObject._y+" --> "+itemObject.correctX+","+itemObject.correctY);
	}
	var itemHeightMax = itemsData.heightMax;
	arrowClip._width = itemArea._width;
	arrowClip._x = manipulationModeClip._x=itemArea._x;
	trace("itemHeightMax: "+itemHeightMax);
	trace("itemScale: "+itemScale);
	trace("arrowClip._height: "+arrowClip._height);
	trace("itemArea._y: "+itemArea._y);
	arrowClip._y = manipulationModeClip._y=itemArea._y-(itemHeightMax/2)-(arrowClip._height/2)-20;
	rangebeginTextField._x = arrowClip._x-((arrowClip._width/2)*.85);
	rangeendTextField._x = arrowClip._x+((arrowClip._width/2)*.85)-rangeendTextField._width;
	rangebeginTextField._y = rangeendTextField._y=arrowClip._y-(rangebeginTextField._height/2)-1;

	function_Report("item_Display","end",0);
}

function item_Duplicate(itemOriginal, itemDuplicateName) {
	return itemOriginal.duplicateMovieClip(itemDuplicateName, level++);
}


function item_Fade(dragObject, fadeStatus) {
	for (var i = 0; i<selectionTotal; i++) {
		var itemObject = item_Get(selectionArray[i]);
		if (itemObject<>dragObject) {
			if (fadeStatus) {
				item_FadeOut(itemObject);
			} else {
				item_FadeIn(itemObject);
			}
		}
	}
}

function item_FadeIn(itemObject) {
	itemObject.createEmptyMovieClip("fadeClip",level++);
	delete this.onEnterFrame;
	itemObject.fadeClip.onEnterFrame = function() {
		this._parent._alpha += 3;
		if (this._parent._alpha>=100) {
			this._parent._alpha = 100;
			if (rationaleMode) {
				if (myRoot.rationalebuttonClip._visible == false) {
					rationaleButton_Update();
				}
				myRoot.rationalebuttonClip._visible = true;
			}
			this.removeMovieClip();
		}
	};
}

function item_FadeOut(itemObject) {
	itemObject.createEmptyMovieClip("fadeClip",level++);
	itemObject.fadeClip.onEnterFrame = function() {
		this._parent._alpha -= 3;
		if (this._parent._alpha<50) {
			this.removeMovieClip();
		}
	};
}

function item_Get(itemNum) {
	var itemName = "item_"+itemNum;
	var itemObject = eval(itemName);
	return itemObject;
}

function item_RepositionSetup(dragObject) {
	var itemLeft = itemArea._x-(itemArea._width/2);
	for (var i = 0; i<selectionTotal; i++) {
		itemObject = item_Get(selectionArray[i]);
		if (itemObject<>dragObject) {
			delete itemObject.onEnterFrame;
		}
		itemObject.newX = itemLeft+(itemObject.itemWidthScaled/2);
		itemLeft += itemObject.itemWidthScaled+itemSpacingFinal;
		if (i<(selectionTotal-1)) {
			equivButton = eval("equivButton_"+i);
			equivButton._x = itemLeft-(itemSpacingFinal/2);
		}

	}
	for (var i = 0; i<selectionTotal; i++) {
		itemObject = item_Get(selectionArray[i]);
		if (itemObject._x<>itemObject.newX) {
		}
		if ((itemObject.newX<>itemObject._x) and (itemObject.newX<>null)) {
			if (itemObject<>dragObject) {
				itemObject.directionMult = (itemObject.newX>itemObject._x) ? 1 : -1;
				var threshhold = (dragObject.itemWidthScaled+itemSpacingFinal)/4;
				trace("threshhold #2: "+threshhold);
				itemObject.itemThreshhold = dragObject._x+(itemObject.directionMult*offsetRatio*threshhold);
				// if dragObject is too close to itemObject, pop itemObject past dragObject
				if (itemObject.directionMult == 1) {
					if ((itemObject._x<itemObject.itemThreshhold) and (Math.abs(dragObject._x-itemObject._x)<threshhold)) {
						trace("jumping #1: "+(itemObject.directionMult*(threshhold+5)));
						itemObject._x = dragObject._x+(itemObject.directionMult*(threshhold+5));
						if (itemObject._x>itemObject.newX) {
							itemObject._x = itemObject.newX;
						}
					}
				} else {
					if ((itemObject._x>itemObject.itemThreshhold) and (Math.abs(dragObject._x-itemObject._x)<threshhold)) {
						trace("jumping #2: "+(itemObject.directionMult*(threshhold+5)));
						itemObject._x = dragObject._x+(itemObject.directionMult*(threshhold+5));
						if (itemObject._x<itemObject.newX) {
							itemObject._x = itemObject.newX;
						}
					}
				}
				if (Math.abs(itemObject._x-itemObject.newX)>itemDeltaX) {
					itemObject.onEnterFrame = function() {
						item_Reposition(this);
					};
				} else {
					itemObject._x = itemObject.newX;
					delete itemObject.onEnterFrame;
					itemObject.newX = null;
				}
			}
		}
	}
}

function item_Reposition(itemObject) {
	itemObject._x += (itemObject.directionMult*itemDeltaX);
	if (Math.abs(itemObject._x-itemObject.newX)<(itemDeltaX*.51)) {
		itemObject._x = itemObject.newX;
		itemObject.newX = null;
		delete itemObject.onEnterFrame;
	}
}

// select items to be ranked
function item_Select() {
	function_Report("item_Select","begin",0);
	variable_Report("item_Select","referenced","selectionData,itemTotal");
	// use user's answers if any, otherwise select random items and order randomly
	selectionArray = [];
	if (selectionData<>String(selectionData)) {
		trace("not a string");
		var flagRequired = false;
		var flagPool = false;
		selectionTotal = (selectionData>0) ? selectionData : selectionDefault;
		trace("selectionTotal: "+selectionTotal);
	} else {
		trace("string");
		var selectionDataArray = selectionData.split(delim_1);
		selectionTotal = (Number(selectionDataArray[0])>0) ? selectionDataArray[0] : selectionDefault;
		var requiredArray = selectionDataArray[1].split(delim_0);
		var flagRequired = (requiredArray[0].length>0) ? true : false;
		var poolArray = selectionDataArray.slice(2);
		var flagPool = (poolArray[0].length>0) ? true : false;
	}
	selectionTotal = (selectionTotal<itemTotal) ? selectionTotal : itemTotal;
	if ((selectionTotal == itemTotal) or ((not flagRequired) and (not flagPool))) {
		requiredArray = ["0-"+(itemTotal-1)];
		flagRequired = true;
	}
	trace("flagRequired: "+flagRequired);
	trace("flagPool: "+flagPool);
	if (flagRequired) {
		selectionArray = selectionData_Process(requiredArray);
		selectionArray = array_Reduce(selectionArray);
		if (not flagPool) {
			poolArray = ["0/"+itemTotal+":"+"0-"+(itemTotal-1)];
			flagPool = true;
		}
	}
	var selectionSubtotal = selectionArray.length;
	var selectionDeficit = (selectionTotal-selectionSubtotal);
	trace("selectionSubtotal: "+selectionSubtotal);
	trace("selectionDeficit: "+selectionDeficit);
	//process pools
	if ((selectionDeficit>0) and (flagPool)) {
		var poolRequiredArray = [];
		for (i=0; i<poolArray.length; i++) {
			poolArray[i] = poolArray[i].split(":");
			poolArray[i][0] = poolArray[i][0].split("/");
			poolArray[i][1] = poolArray[i][1].split(delim_1);
			poolArray[i][1] = selectionData_Process(poolArray[i][1]);
			if (poolArray[i][0][0].length == 0) {
				poolArray[i][0][0] = 0;
			}
			if (poolArray[i][0][1].length == 0) {
				poolArray[i][0][1] = poolArray[i][1].length;
			}
			trace(poolArray[i][0][0]+"/"+poolArray[i][0][1]+":"+poolArray[i][1]);
			if (poolArray[i][0][0]>0) {
				var tempArray = array_Choose(poolArray[i][1], poolArray[i][0][0]);
				poolRequiredArray = poolRequiredArray.concat(tempArray);
			}
			poolRequiredArray = array_Reduce(poolRequiredArray);
			var requiredTotal = poolRequiredArray.length;
			if (selectionDeficit<requiredTotal) {
				poolRequiredArray = array_Choose(poolRequiredArray, selectionDeficit);
			}
		}
		selectionArray = selectionArray.concat(poolRequiredArray);
		selectionArray = array_Reduce(selectionArray);
		var selectionSubtotal = selectionArray.length;
		selectionDeficit = selectionTotal-selectionSubtotal;
		trace("selectionDeficit: "+selectionDeficit);
		if (selectionSubtotal<selectionTotal) {
			var flag = true;
			while (flag) {//choose optional items, make sure there are enough even after duplicates are eliiminated
				var poolOptionalArray = [];
				for (i=0; i<poolArray.length; i++) {
					tempArray = array_Choose(poolArray[i][1], (poolArray[i][0][1]-poolArray[i][0][0]));
					trace("tempArray: "+tempArray);
					poolOptionalArray = poolOptionalArray.concat(tempArray);
				}
				trace("poolOptionalArray: "+poolOptionalArray);
				var selectionTempArray = (selectionArray.length>0) ? selectionArray.concat(poolOptionalArray) : poolOptionalArray;
				selectionTempArray = array_Reduce(selectionTempArray);
				trace("selectionTotal: "+selectionTotal);
				trace("selectionTempArray.length: "+selectionTempArray.length);
				if (selectionTempArray.length>=selectionTotal) {
					flag = false;
				}
			}
			flag = true;
			while (flag) {
				var poolOptionalTempArray = array_Choose(poolOptionalArray, selectionDeficit);
				selectionTempArray = selectionArray.concat(poolOptionalTempArray);
				selectionTempArray = array_Reduce(selectionTempArray);
				if (selectionTempArray.length == selectionTotal) {
					flag = false;
				}
			}
			poolOptionalArray = array_Choose(poolOptionalArray, selectionDeficit);
			trace("poolOptionalArray: "+poolOptionalArray);
			selectionArray = selectionArray.concat(poolOptionalTempArray);
		}
	}
	selectionArray = array_Choose(selectionArray, selectiontotal);
	trace("selectionArray: "+selectionArray);
	trace("rankOrder: "+rankOrder);
	rankOrder_Prune();
	trace("selectionArray: "+selectionArray);
	trace("rankOrder: "+rankOrder);
	var grade = 100;
	while (grade>highGrade) {
		selectionArray = array_Choose(rankOrder, selectionTotal);
		grade = grade_Get();
		trace("grade: "+grade);
	}
	variable_Report("item_Select","defined","selectionArray,selectionTotal");
	function_Report("item_Select","end",0);
}
function items_Activate(activationStatus) {
	for (var i = 0; i<selectionTotal; i++) {
		itemObject = item_Get(selectionArray[i]);
		if (activationStatus) {
			itemObject.onRollOver = function() {
				selectedObject = this;
			};
			itemObject.onRollOut = function() {
				selectedObject = (selectedObject == this) ? null : selectedObject;
			};
			itemObject.onPress = function() {
				drag_Start(this);
			};
			itemObject.onRelease = itemObject.onReleaseOutside=function () {
				drag_Stop(this);
			};
			itemObject.tabEnabled = false;
		} else {
			delete itemObject.onPress;
			delete itemObject.onRelease;
			delete itemObject.onReleaseOutside;
		}
	}
}

function items_GetData(itemScale) {
	var widthTotal = 0;
	var heightMax = 0;
	for (var i = 0; i<selectionTotal; i++) {
		var itemObject = item_Get(selectionArray[i]);
		itemObject._xscale = itemObject._yscale=100;
		var itemImageWidth = itemObject.imageWidth*(itemScale/100);
		var itemImageHeight = itemObject.imageHeight*(itemScale/100);
		var itemLabelWidth = itemObject.labelWidth;
		trace("itemImageWidth: "+itemImageWidth);
		trace("itemLabelWidth: "+itemLabelWidth);
		trace("itemImageHeight: "+itemImageHeight);
		widthTotal += (itemImageWidth>itemLabelWidth) ? itemImageWidth : itemLabelWidth;
		trace("widthTotal: "+widthTotal);
		heightMax = (itemImageHeight>heightMax) ? itemImageHeight : heightMax;
		trace("heightMax: "+heightMax);
	}
	return {widthTotal:widthTotal, heightMax:heightMax};
}

function itemArea_Set() {
	var spacing = 10;
	trace("bigN._y: "+bigN._y);
	trace("bigN._height / 2: "+(bigN._height/2));
	var itemAreaWidth = myRoot_width-10;
	if (pictureMode) {
		trace("itemAreaBottom: "+itemAreaBottom);
		trace("itemAreaTop: "+itemAreaTop);
		//rationalebuttonClip.rationaleButton._y = myRoot_height-(rationaleButton._height/2)-spacing;
		bigN._y = myRoot_height-(bigN._height/2);
		//rationalebuttonClip._y = bigN._y;
		rationalebuttonClip._y = myRoot_height-(rationalebuttonClip._height/2)-(spacing*2);
		gradinginfoButtonClip._y = myRoot_height-(gradinginfoButtonClip._height/2)-(spacing*2);
		grademeButton._y = gradinginfoButtonClip._y-(gradinginfoButtonClip._height/2)-(grademeButton._height/2)-spacing;
		tryagainButtonClip._y = grademeButton._y;
		
		if(stageMode)
		{
			if(termPerStage==undefined) termPerStage = 2;
			nextstageButtonClip._y = grademeButton._y;
			stageGraph._y = grademeButton._y;
			for (var i = 0; i<3; i++) {
				var stageitemColor = new Color(eval("myRoot.stageGraph.stage_"+i));
				stageitemColor.setRGB(204);
			}
			
			var stageitemColor = new Color(eval("myRoot.stageGraph.stage_"+Math.floor(myRoot.rankNum/termPerStage)));				stageitemColor.setRGB(65280);
			trace("*******stage="+myRoot.stageGraph+stageitemColor+Math.floor(myRoot.rankNum/termPerStage));

		}

		//var itemAreaTop = PictureArea._y+(PictureArea._height/2)+arrowClip._height+labelHeight+(spacing*2);
		if (pictureStyle == 2) {
			var itemAreaTop = lessonbuttonClip._y+(lessonbuttonClip._height/2)+arrowClip._height+25;
			var itemAreaBottom = tryagainButtonClip._y-(tryagainButtonClip._height/2)-labelHeight;
			//itemAreaWidth = itemAreaWidth/2;
			itemAreaWidth = myRoot_width-10-PictureArea._width;
			itemArea._x = itemAreaWidth/2;
		} else {
			//var itemAreaTop = PictureArea._y+(PictureArea._height/2)+(spacing*2);
			//New//
			var itemAreaTop = PictureArea._y+(PictureArea._height/2)+(spacing*2)+arrowClip._height;
			var itemAreaBottom = myRoot_height-tryagainButtonClip._height-grademeButton._height-(labelHeight*2)-(spacing*2);
		trace("grade me: "+grademeButton._height);
		trace("tryAgain: "+tryagainButtonClip._height);
		trace("labelHeight: "+labelHeight);
		trace("spacing: "+spacing);
		}
		//var itemAreaBottom = myRoot_height-tryagainButtonClip._height-grademeButton._height-(labelHeight*2);
		//myRoot._height = originalHeight + PictureArea._height;
		//backgroundClip._height = originalHeight + PictureArea._height;
		//myRoot._height += itemObject._height;
		//myRoot_height = myRoot._height;
		trace("itemAreaBottom: "+itemAreaBottom);
		trace("itemAreaTop: "+itemAreaTop);

		//myRoot_height - grademeButton._height;
		trace("my root: "+myRoot_height);
		trace("grade me: "+grademeButton._y);
		trace("rationale: "+rationalebuttonClip._y);
		trace("grade me info: "+gradinginfoButtonClip._y);
		trace("tryagain: "+tryagainButtonClip._y);
		trace("grade height: "+grademeButton._height);
		trace("rationale height: "+rationalebuttonClip._height);
		trace("grade info height: "+gradinginfoButtonClip._height);
		trace("try again height: "+tryagainButtonClip._height);


	} else if (lessonMode) {
		var itemAreaTop = lessonbuttonClip._y+(lessonbuttonClip._height/2)+arrowClip._height+25;
		var itemAreaBottom = tryagainButtonClip._y-(tryagainButtonClip._height/2)-labelHeight;
	} else {
		var itemAreaTop = instructionsTextField._y+instructionsTextField._height+arrowClip._height+30;
		var itemAreaBottom = tryagainButtonClip._y-(tryagainButtonClip._height/2)-labelHeight;
	}
	var itemAreaHeight = itemAreaBottom-itemAreaTop;
	var itemAreaY = itemAreaTop+(itemAreaHeight/2);
	trace("itemAreaBottom: "+itemAreaBottom);
	trace("itemAreaHeight: "+itemAreaHeight);
	trace("itemAreaY: "+itemAreaY);
	itemArea._width = itemAreaWidth;
	trace("itemArea._width: "+itemArea._width);
	itemArea._height = itemAreaHeight;
	trace("itemArea._height: "+itemArea._height);
	itemArea._y = itemAreaY;
	trace("itemArea._y: "+itemArea._y);
}


function itemFeedback_Display(itemObject, itemNum) {
	function_Report("itemFeedback_Display","begin",1);
	variable_Report("itemFeedback_Display","referenced","itemFeedback?");
	trace("itemObject: "+itemObject);
	var labelObject = itemObject.labelTextField;
	trace("labelObject: "+labelObject);
	if (labelObject.htmlText<>"") {
		labelObject.htmlText += "\r";
	}
	trace("itemLabels: "+itemLabels);
	trace("itemObject.itemValueIndex: "+itemObject.itemValueIndex);
	if (cyclicMode) {
		if (equivMode) {
			//labelObject.htmlText += itemlabelTextStyleHTML+string_Parse(itemLabels[itemObject.itemValueIndex][1])+"</font>";
			labelObject.htmlText += itemlabelTextStyleHTML+string_Parse(itemLabels[selectionArray[itemNum]][1])+"</font>";
		} else {
			labelObject.htmlText += itemlabelTextStyleHTML+string_Parse(itemLabels[itemObject.itemValueIndex][1])+"</font>";
		}
	} else {
		labelObject.htmlText += itemlabelTextStyleHTML+string_Parse(itemLabels[selectionArray[itemNum]][1])+"</font>";
	}
	labelObject.autoSize = "center";
	labelObject._x = -(labelObject._width/2);
	//labelObject.setTextFormat(itemlabelFormat);
	function_Report("itemFeedback_Display","end",1);
}

function itemHitArea_Create(itemObject) {
	itemObject.createEmptyMovieClip("itemHitArea",level++);
	itemObject.itemHitArea.beginFill(0x000000,0);
	itemObject.itemHitArea.lineStyle(1,0x000000,0);
	itemObject.itemHitArea.moveTo(itemObject.xMin,itemObject.yMin);
	itemObject.itemHitArea.lineTo(itemObject.xMax,itemObject.yMin);
	itemObject.itemHitArea.lineTo(itemObject.xMax,itemObject.yMax);
	itemObject.itemHitArea.lineTo(itemObject.xMin,itemObject.yMax);
	itemObject.itemHitArea.endFill();
}

function itemLabel_Display(itemObject, itemNum) {
	function_Report("itemLabel_Display","begin",1);
	variable_Report("itemLabel_Display","referenced","selectionArray");
	// itemObject.itemWidth = itemObject._width;
	var labelWidth = itemObject.labelWidth;
	var labelName = "labelTextField";
	itemObject.createTextField(labelName,level++,0,0,50,20);
	var labelObject = eval("itemObject."+labelName);
	labelObject._xscale = labelObject._yscale=(100/itemObject._xscale)*100;
	labelObject.embedFonts = true;
	labelObject.html = true;
	labelObject.htmlText = itemlabelTextStyleHTML+string_Parse(itemLabels[selectionArray[itemNum]][0])+"</font>";
	trace("htmlText: "+labelObject.htmlText);
	labelObject.multiline = true;
	labelObject.autoSize = "center";
	labelObject.selectable = false;
	var itemWidthPlus = itemObject.itemWidthScaled+itemSpacingFinal-10;
	if (labelWidth>itemWidthPlus) {
		labelObject._xscale *= (itemWidthPlus/labelWidth);
	}
	var flag = true;

	var xOld = 0;
	helpClip.helpTextField.text += "itemLabel_Display while\r";
	while (flag) {
		labelObject._x = -(labelObject._width/2);
		if (labelObject._x == xOld) {
			flag = false;
		} else {
			xOld = labelObject._x;
		}
	}
	labelObject._y = itemObject.imageHeight/2;
	function_Report("itemLabel_Display","end",1);
}

function itemLabels_Setup() {
	function_Report("itemLabels_Setup","begin",0);
	var labelName = "labelTextField";
	myRoot.createTextField(labelName,level++,0,-100,500,100);
	var labelObject = eval(labelName);
	trace("labelObject: "+labelObject);
	labelObject.embedFonts = true;
	var labelWidthMax = 0;
	var labelHeightMax = 0;
	for (var i = 0; i<itemLabels.length; i++) {
		trace("i: "+i);
		labelObject.html = true;
		trace("itemLabels.length: "+itemLabels.length);
		labelObject.htmlText = itemlabelTextStyleHTML+itemLabels[i][0]+"\n"+itemLabels[i][1]+"</font>";
		labelObject.multiline = true;
		labelObject.autoSize = "center";
		trace("labelObject._width: "+labelObject._width);
		var labelWidthPrevious = 0;
		var labelWidthCurrent = 1;
		helpClip.helpTextField.text += "itemLabels_Setup while\r";
		while (labelWidthCurrent<>labelWidthPrevious) {
			labelWidthPrevious = labelWidthCurrent;
			labelWidthCurrent = labelObject._width;
			trace("labelWidthPrevious: "+labelWidthPrevious);
			trace("labelWidthCurrent: "+labelWidthCurrent);
		}
		var itemName = "item_"+i;
		var itemObject = eval(itemName);
		itemObject.labelWidth = labelObject._width;
		if (labelObject._width>labelWidthMax) {
			labelWidthMax = labelObject._width;
		}
		if (labelObject._height>labelHeightMax) {
			labelHeightMax = labelObject._height;
		}
	}
	trace("labelObject.text: "+labelObject.text);
	labelWidth = labelWidthMax;
	trace("labelWidth (Original): "+labelWidth);
	labelHeight = ((itemLabels[i][0].length == 0) and (itemLabels[i][1].length == 0)) ? 0 : labelHeightMax;
	trace("labelHeight: "+labelHeight);
	labelObject.removeTextField();
	variable_Report("itemLabels_Setup","defined","labelWidth,labelHeight");
	function_Report("itemLabels_Setup","end",0);
}

function itemValueIndex_Get(itemValue) {
	function_Report("itemValueIndex_Get","begin",2);
	variable_Report("itemValueIndex_Get","referenced","itemValues");
	trace("itemValue: "+itemValue);
	trace("itemValues: "+itemValues);
	for (var i = 0; i<itemValues.length; i++) {
		if (itemValues[i]>itemValue) {
			break;
		}
	}
	i -= 1;
	trace("i: "+i);
	function_Report("itemValueIndex_Get","end",2);
	return i;
}

function lesson_Display() {
	lock_Toggle(true,20000,50);
	if (lessonFlag) {
		trace("displaying lesson pages");
		lessonObject._visible = false;
		trace("hiding: "+lessonObject);
		var lessonName = "lesson_"+lessonPage;
		lessonObject = eval(lessonName);
		lessonObject._visible = true;
		trace("displaying: "+lessonObject);
	} else {
		trace("loading lesson pages");
		lessonFlag = true;
		var lessonDepth = 26000;
		myRoot.attachMovie("lessonClip","lesson_1",lessonDepth);
		lessonPageTotal = lesson_1._totalframes;
		var buttonbarWidth = 10;
		var buttonbarHeight = 30;
		var lessonHeightMax = 0;
		var lessonWidthAllowed = myRoot_width*.95;
		var lessonHeightAllowed = myRoot_height*.95;
		for (var i = 0; i<lessonPageTotal; i++) {
			lesson_1.gotoAndStop(i+1);
			var boundsObject = lesson_1.getBounds(lesson_1);
			var lessonWidth = boundsObject.xMax-boundsObject.xMin;
			var lessonHeight = boundsObject.yMax-boundsObject.yMin;

			lessonWidth = (lessonWidth>lessonWidthAllowed) ? lessonWidthAllowed : lessonWidth;
			lessonHeight = (lessonHeight>lessonHeightAllowed) ? lessonHeightAllowed : lessonHeight;
			lessonHeightMax = (lessonHeight>lessonHeightMax) ? lessonHeight : lessonHeightMax;
		}
		lesson_1.lessonBottom = ((myRoot_height+lessonHeightMax)/2)-15;

		for (var i = 0; i<lessonPageTotal; i++) {
			var lessonName = "lesson_"+(i+1);

			if (i>0) {
				myRoot.attachMovie("lessonClip",lessonName,lessonDepth+i);
			}

			lessonObject = eval(lessonName);

			lessonObject.gotoAndStop(i+1);
			lessonObject.lessonBottom = lesson_1.lessonBottom;
			lessonObject._visible = false;

			//create buttonBar
			lessonObject.createEmptyMovieClip("buttonBar",level++);

			//create buttonBarBox
			lessonObject.buttonBar.createEmptyMovieClip("buttonBarBox",level++);
			lessonObject.buttonBar.buttonBarBox._x = lessonObject.buttonBar.buttonBarBox._y=0;
			lessonObject.buttonBar.buttonBarBox.beginFill(0xEECCBB,100);
			lessonObject.buttonBar.buttonBarBox.lineStyle(0,0x000000,0);
			lessonObject.buttonBar.buttonBarBox.moveTo(0,0);
			lessonObject.buttonBar.buttonBarBox.lineTo(buttonbarWidth,0);
			lessonObject.buttonBar.buttonBarBox.lineTo(buttonbarWidth,buttonbarHeight);
			lessonObject.buttonBar.buttonBarBox.lineTo(0,buttonbarHeight);
			lessonObject.buttonBar.buttonBarBox.endFill();

			//set up closeButton
			lessonObject.buttonBar.attachMovie("closeButton2","buttonClose",level++);
			lessonObject.buttonBar.buttonClose.onRelease = function() {
				this._parent._parent._visible = false;
				if (myRoot.locked<>true) {
					myRoot.lock_Toggle(false);
				} else {
					myRoot.lock_Toggle(true,10000,0);
				}
			};
			lessonobject.buttonBar.buttonClose.tabEnabled = false;
			if (lessonPageTotal>1) {
				with (lessonObject.buttonBar) {
					attachMovie("previousButton","buttonPrevious",level++);
					attachMovie("nextButton","buttonNext",level++);
				}
			}
			lessonObject.boundsObject = lessonObject.getBounds(lessonObject);
			trace("LessonBounds"+lessonObject.boundsObject.xMin+","+lessonObject.boundsObject.xMax+","+lessonObject.boundsObject.yMin+","+lessonObject.boundsObject.yMax);
			trace("LessonHeight"+lessonObject._height);

			//position lessonObject
			lessonObject._x = (myRoot_width/2)-(lessonObject.boundsObject.xMax+lessonObject.boundsObject.xMin)/2;
			lessonObject._y = lessonObject.lessonBottom-lessonObject.boundsObject.yMax;

			//position buttonBar
			lessonObject.buttonBar._x = lessonObject.boundsObject.xMin;
			lessonObject.buttonBar._y = lessonObject.boundsObject.yMax;
			var barWidth = lessonObject.boundsObject.xMax-lessonObject.boundsObject.xMin;
			lessonObject.buttonBar.buttonBarBox._width = barWidth;

			//position buttonClose
			lessonObject.buttonBar.buttonClose._x = lessonObject.buttonBar.buttonBarBox._width-(lessonObject.buttonBar.buttonClose._width/2)-10;
			lessonObject.buttonBar.buttonClose._y = lessonObject.buttonBar.buttonBarBox._y+(lessonObject.buttonBar.buttonBarBox._height/2)-1;
			lessonObject.buttonBar.buttonClose.tabEnabled = false;

			if (lessonPageTotal>1) {
				//create page number button clip
				lessonObject.buttonBar.createEmptyMovieClip("pagenumClip",level++);

				//create page number buttons
				for (var j = 0; j<lessonPageTotal; j++) {
					pagenumObject = lessonObject.buttonBar.pagenumClip.createEmptyMovieClip("pagenum_"+(j+1), level++);

					pagenumObject.createEmptyMovieClip("button",level++);
					pagenumObject.button.lineStyle(0,0x000000,0);
					pagenumObject.button.buttonColor = (j == i) ? 0x00FF00 : 0x009900;
					pagenumObject.button.beginFill(pagenumObject.button.buttonColor,50);
					draw_Circle(pagenumObject.button,0,0,10);
					pagenumObject.button.endFill();
					pagenumObject._x = (pagenumObject.button._width/2)+((pagenumObject.button._width+5)*j);
					pagenumObject._y = 0;

					if (j<>i) {
						pagenumObject.button.onRollOver = function() {
							this.colorObject = new Color(this);
							this.colorObject.setRGB(0xFFFF00);
						};
						pagenumObject.button.onRollOut = pagenumObject.button.onDragOut=function () {
							this.colorObject = new Color(this);
							this.colorObject.setRGB(this.buttonColor);
						};
						pagenumObject.button.onRelease = function() {
							this.pagenum = Number(this._parent._name.split("_")[1]);
							trace("pagenum: "+this.pagenum);
							myRoot.lessonPage = this.pagenum;
							myRoot.lesson_Display();
						};
						pagenumObject.button.tabEnabled = false;
					}
					//create page number                                                              
					pagenumObject.createTextField("pagenumTextField",level++,0,0,150,50);
					with (pagenumObject.pagenumTextField) {
						html = false;
						selectable = false;
						multiline = false;
						wordWrap = false;
						embedFonts = true;
						text = j+1;
						setTextFormat(pagenumFormat);
						if (j == i) {
							//textColor = 0x00FF00;
						}
						autoSize = "left";
						_x = -(_width/2);
						_y = -(_height/2);
					}
				}
				lessonObject.buttonBar.pagenumClip._x = (lessonObject.buttonBar.buttonBarBox._width-lessonObject.buttonBar.pagenumClip._width)/2;
				lessonObject.buttonBar.pagenumClip._y = lessonObject.buttonBar.buttonBarBox._y+(lessonObject.buttonBar.buttonBarBox._height/2)-1;

				//position buttonPrevious
				lessonObject.buttonBar.buttonPrevious._x = lessonObject.buttonBar.pagenumClip._x-25;
				lessonObject.buttonBar.buttonPrevious._y = buttonbarHeight/2;
				lessonObject.buttonBar.buttonPrevious.tabEnabled = false;

				//position buttonNext
				lessonObject.buttonBar.buttonNext._x = lessonObject.buttonBar.pagenumClip._x+lessonObject.buttonBar.pagenumClip._width+25;
				lessonObject.buttonBar.buttonNext._y = buttonbarHeight/2;
				lessonObject.buttonBar.buttonNext.tabEnabled = false;
			}
			//create lessonBorder                                                              
			lessonObject.createEmptyMovieClip("lessonBorder",level++);
			lessonObject.lessonBorder._x = lessonObject.boundsObject.xMin;
			lessonObject.lessonBorder._y = lessonObject.boundsObject.yMin;
			lessonObject.lessonBorder.beginFill(0x000000,0);
			lessonObject.lessonBorder.lineStyle(5,0xCC6633,100);
			lessonObject.lessonBorder.moveTo(0,0);
			lessonObject.lessonBorder.lineTo(lessonObject.boundsObject.xMax-lessonObject.boundsObject.xMin,0);
			lessonObject.lessonBorder.lineTo(lessonObject.boundsObject.xMax-lessonObject.boundsObject.xMin,lessonObject.boundsObject.yMax-lessonObject.boundsObject.yMin+buttonbarHeight);
			lessonObject.lessonBorder.lineTo(0,lessonObject.boundsObject.yMax-lessonObject.boundsObject.yMin+buttonbarHeight);
			lessonObject.lessonBorder.endFill();
		}
		lesson_Display();
	}
	if (lessonPage>1) {
		var buttonColor = new Color(lessonObject.buttonBar.buttonPrevious);
		lessonObject.buttonBar.buttonColor.setRGB(0x009900);
		lessonObject.buttonBar.buttonPrevious.onRollOver = function() {
			this.colorObject = new Color(this);
			this.colorObject.setRGB(0xFFFF00);
		};
		lessonObject.buttonBar.buttonPrevious.onRollOut = lessonObject.buttonBar.buttonPrevious.onDragOut=function () {
			this.colorObject = new Color(this);
			this.colorObject.setRGB(0x009900);
		};
		lessonObject.buttonBar.buttonPrevious.onRelease = function() {
			myRoot.lessonPage--;
			myRoot.lesson_Display();
		};
	} else {
		lessonObject.buttonBar.buttonPrevious._alpha = 30;
		lessonObject.buttonBar.buttonPrevious.enabled = false;
		var buttonColor = new Color(lessonObject.buttonBar.buttonPrevious);
		buttonColor.setRGB(0x000000);
	}
	if (lessonPage<lessonPageTotal) {
		var buttonColor = new Color(lessonObject.buttonBar.buttonNext);
		buttonColor.setRGB(0x009900);
		lessonObject.buttonBar.buttonNext.onRollOver = function() {
			this.colorObject = new Color(this);
			this.colorObject.setRGB(0xFFFF00);
		};
		lessonObject.buttonBar.buttonNext.onRollOut = lessonObject.buttonBar.buttonNext.onDragOut=function () {
			this.colorObject = new Color(this);
			this.colorObject.setRGB(0x009900);
		};
		lessonObject.buttonBar.buttonNext.onRelease = function() {
			myRoot.lessonPage++;
			myRoot.lesson_Display();
		};
	} else {
		lessonObject.buttonBar.buttonNext._alpha = 30;
		lessonObject.buttonBar.buttonNext.enabled = false;
		var buttonColor = new Color(lessonObject.buttonBar.buttonNext);
		buttonColor.setRGB(0x000000);
	}
}

function lesson_Remove() {
	lessonFlag = false;
	for (var i = 0; i<lessonPageTotal; i++) {
		var lessonName = "lesson_"+(i+1);
		var lessonObject = eval(lessonName);
		lessonObject.removeMovieClip();
	}
	lessonPage = 1;
}
// Toggles lockStatus (to have clip to be visible or not and uses lockLevel, lockAlpha 
// Creates an empty movie clip that covers 0->myroot size at lockAlpha
// swap depths at lockLevel
function lock_Toggle(lockStatus, lockLevel, lockAlpha) {
	if (lockStatus) {
		if (lockClip == null) {
			// Creates an empty movie clip that covers 0->myroot size
			myRoot.createEmptyMovieClip("lockClip",lockLevel);
			lockClip.beginFill("0x"+colorSchemeObject.colorBackground);
			lockClip.moveTo(0,0);
			lockClip.lineTo(myRoot_width,0);
			lockClip.lineTo(myRoot_width,myRoot_height);
			lockClip.lineTo(0,myRoot_height);
			lockClip.lineTo(0,0);
			lockClip.endFill();
			lockClip.onRelease = function() {
				// do nothing, capture all mouse clicks
			};
			lockClip.tabEnabled = false;
			lockClip.useHandCursor = false;
		} else {
			//if already created then make visible
			lockClip._visible = true;
		}
		//Set the transparency with lockAlpha
		lockClip._alpha = lockAlpha;
		lockClip.swapDepths(lockLevel);
	} else {
		if (locked) {
			lockClip._alpha = lockAlpha;
			lockClip.swapDepths(lockLevel);
		} else {
			lockClip._visible = false;
		}
	}
}

function math_convertRealToFraction(numInput) {
	function_Report("math_convertRealToFraction","begin",2);
	if ((numInput>.111) and (numInput<.112)) {
		trace("1/9");
	}
	trace("numInput(before): "+numInput);
	numInput = math_computeCloseEnough(numInput);
	trace("numInput(after): "+numInput);
	if (fractionType>0) {
		var errorFlag = false;
		var numBig = null;
		// var numInput = 111/1031;
		// var numInput = 2553/23713;
		// var numInput = 5/11103;
		// var numInput = 779/103;
		trace("---");
		trace("numInput: "+numInput);
		var decimalString = String(numInput).split(".")[1];
		trace("decimalString: "+decimalString);
		var decimalPlaces = decimalString.length;
		trace("decimalPlaces: "+decimalPlaces);
		trace("===");
		if (decimalPlaces<13) {
			trace("DECIMAL TYPE: non-repeating");
			var eulerArray = [numInput*Math.pow(10, decimalPlaces), Math.pow(10, decimalPlaces)];
		} else {
			trace("DECIMAL TYPE: unknown (not non-repeating");
			var digitsArray = math_computeRepeatingDigits(numInput);
			var digitsNonRepeating = digitsArray.digitsNonRepeating;
			trace("digitsNonRepeating: "+digitsNonRepeating);
			var digitsRepeating = digitsArray.digitsRepeating;
			trace("digitsRepeating: "+digitsRepeating);
			if (digitsNonRepeating == 0) {
				trace("DECIMAL TYPE: simple repeating");
				var eulerArray = [(numInput*Math.pow(10, digitsRepeating))-numInput, Math.pow(10, digitsRepeating)-1];
			} else {
				trace("DECIMAL TYPE: unknown (not simple repeating)");
				var numMult = numInput*Math.pow(10, digitsNonRepeating);
				var digitsArray2 = math_computeRepeatingDigits(numMult);
				var digitsNonRepeating2 = digitsArray2.digitsNonRepeating;
				trace("digitsNonRepeating2: "+digitsNonRepeating2);
				var digitsRepeating2 = digitsArray2.digitsRepeating;
				trace("digitsRepeating2: "+digitsRepeating2);
				if ((digitsNonRepeating<6) and (digitsRepeating2<6)) {
					trace("DECIMAL TYPE: ugly repeating");
					var euler_1 = Math.pow(10, digitsNonRepeating+digitsRepeating2)-Math.pow(10, digitsNonRepeating);
					euler_1 = math_computeCloseEnough(euler_1);
					trace("numInput: "+numInput);
					trace("euler_1: "+euler_1);
					var euler_0 = numInput*euler_1;
					trace("euler_0: "+euler_0);
					euler_0 = math_computeCloseEnough(euler_0);
					var eulerArray = [euler_0, euler_1];
				} else {
					trace("DECIMAL TYPE: brute force");
					var eulerArray = null;
					var whole = Math.floor(numInput);
					var remainder = numInput-Math.floor(numInput);
					trace("remainder: "+remainder);
					if (remainder>.005) {
						var remainderMult = 1000;
					} else {
						var remainderMult = 1;
					}
					remainder = remainder/remainderMult;
					trace(1/remainder);
					var divisorFloor = Math.floor(1/remainder);
					var divisorCeiling = Math.ceil(1/remainder);
					divisorCeiling = (divisorCeiling == divisorFloor) ? divisorFloor+1 : divisorCeiling;
					trace("divisorFloor: "+divisorFloor);
					trace("divisorCeiling: "+divisorCeiling);
					var flag = true;
					var counter = 1;
					helpClip.helpTextField.text += "math_convertRealToFraction while\r";
					while (flag) {
						for (i=(divisorFloor*counter); i<(divisorCeiling*counter); i++) {
							// trace("i: " + i);
							var temp = numInput*i;
							var tempRounded = Math.round(temp);
							var tempDif = Math.abs(tempRounded-temp);
							if (tempDif<.00001) {
								temp = tempRounded;
								flag = false;
							} else {
								counter++;
								if (counter>999999) {
									flag = false;
									errorFlag = true;
								}
							}
							if (flag == false) {
								break;
							}
						}
					}
					if (errorFlag == false) {
						var eulerArray = [temp, i];
					}
				}
			}
		}
		trace("eulerArray: "+eulerArray);
	}
	if ((errorFlag) or (fractionType == 0)) {
		var myFractionString = math_computeFixedDigits(numInput, fixedDigits);
	} else {
		var eulerDiv = math_computeEuler(eulerArray[0], eulerArray[1]);
		trace("eulerDiv: "+eulerDiv);
		trace("eulerArray: "+eulerArray);
		var numerator = math_computeCloseEnough(eulerArray[0]/eulerDiv);
		trace("numerator: "+numerator);
		var denominator = math_computeCloseEnough(eulerArray[1]/eulerDiv);
		trace("denominator: "+numerator);
		if (denominator == 1) {
			var myFractionString = numerator;
		} else {
			if (fractionType == 2) {
				var whole = Math.floor(numerator/denominator);
				numerator = numerator-(whole*denominator);
				var myFractionString = (whole>0) ? whole+" " : "";
				myFractionString += numerator+"/"+denominator;
			} else {
				var myFractionString = numerator+"/"+denominator;
			}
		}
		trace("myFractionString: "+myFractionString);
	}
	function_Report("math_convertRealToFraction","end",2);
	return myFractionString;
}

function math_computeCloseEnough(numInput) {
	function_Report("math_computeCloseEnough","begin",3);
	for (var i = 0; i<14; i++) {
		var mult = Math.pow(10, i);
		var numMult = numInput*mult;
		trace("numMult: "+numMult);
		if (Math.abs(numMult-Math.round(numMult))<.0001) {
			break;
		}
	}
	if (i<14) {
		numInput = Math.round(numInput*Math.pow(10, i))/Math.pow(10, i);
		trace("rounding to: "+numInput);
	}
	function_Report("math_computeCloseEnough","end",3);
	return numInput;
}

function math_computeEuler(eulerArray_0, eulerArray_1) {
	eulerArray_0 = math_computeCloseEnough(eulerArray_0);
	eulerArray_1 = math_computeCloseEnough(eulerArray_1);
	trace("eulerArray_0: "+eulerArray_0);
	trace("eulerArray_1: "+eulerArray_1);
	eulerArray = (eulerArray_0>eulerArray_1) ? [eulerArray_0, eulerArray_1] : [eulerArray_1, eulerArray_0];
	trace("eulerArray sorted: "+eulerArray);
	helpClip.helpTextField.text += "math_computeEuler while\r";
	while (eulerArray[1]>0) {
		var numDiv = Math.floor(eulerArray[0]/eulerArray[1]);
		var eulerNew = Math.round(eulerArray[0]-(numDiv*eulerArray[1]));
		eulerArray.push(eulerNew);
		trace("eulerArray: "+eulerArray);
		eulerArray.shift();
		trace("eulerArray: "+eulerArray);
	}
	return eulerArray[0];
}

function math_computeFixedDigits(numInput, numDigits) {
	numInput *= Math.pow(10, numDigits);
	numInput = Math.round(numInput);
	numInput /= Math.pow(10, numDigits);
	return numInput;
}

function math_computeRepeatingDigits(numInput) {
	function_Report("math_computeRepeatingDigits","begin",1);
	for (var i = 1; i<14; i++) {
		var mult = Math.pow(10, i);
		var numMult = numInput*mult;
		var numDif = numMult-numInput;
		var numDif = math_computeCloseEnough(numDif);
		trace("numDif: "+numDif);
		var decimalStringDif = String(numDif).split(".")[1];
		var decimalPlacesDif = (decimalStringDif.length>0) ? decimalStringDif.length : 0;
		trace("decimalPlacesDif: "+decimalPlacesDif);
		if (decimalPlacesDif<13) {
			break;
		}
	}
	function_Report("math_computeRepeatingDigits","end",1);
	return {digitsNonRepeating:decimalPlacesDif, digitsRepeating:i};
}
//sets the width and height for screen
function myRoot_Setup() {
	myRoot = this;
	myRoot_width = myRoot._width;
	if (pictureMode) {
		myRoot_height = myRoot._height+pictureHeight;
	} else {
		myRoot_height = myRoot._height;
	}
}


function picture_Display() {
	function_Report("picture_Display","begin",0);
	// compute spacing parameters
	var displayWidth = PictureArea._width;
	var displayHeight = PictureArea._height;
	trace("displayWidth: "+displayWidth);
	trace("displayHeight: "+displayHeight);
	var x = 0;
	var picObject = eval("picture_"+x);
	trace("picObject: "+picObject);
	if (pictureStyle == 1 || pictureStyle == 2) {
		PictureArea._y = PictureArea._height/2;
		//PictureArea._width = myRoot_width/2;
		PictureArea._width = picObject._width;
		//PictureArea._x = myRoot_width*0.75;
		PictureArea._x = myRoot_width-(PictureArea._width/2);
	}
	trace("picy: "+PictureArea._y);
	picObject._x = PictureArea._x;
	picObject._y = PictureArea._y;
	trace("picWidth: "+PictureArea._width);
	trace("picHeight: "+PictureArea._height);
	trace("picx: "+PictureArea._x);
	trace("picy: "+PictureArea._y);
	picObject._visible = true;
	picObject.swapDepths(level++);
	picObject.tabEnabled = false;

	//**************** SubPicture Placement************//
	for (var i = 0; i<subPicTotal; i++) {
		var subpicItem = eval("subPicture_"+i);
		subpicItem._x = picObject._x+Number(subpicArray[subpicItem.index][0]);
		subpicItem._y = picObject._y+Number(subpicArray[subpicItem.index][1]);
		trace("tempSelect, SelectNum, selectRange: "+tempSelect+selectNum+selectRange);
		subpicItem._visible = true;
		subpicItem.swapDepths(level++);
		subpicItem.tabEnabled = false;
		trace("picitem: "+subpicItem);
		trace("picitemx: "+subpicItem._x);
		trace("picitemy: "+subpicItem._y);
		trace("picitemx: "+subpicArray[0][0]);
		trace("picitemy: "+subpicArray[0][1]);
	}

	//**************** Mini Item Placement************//
	for (var i = 0; i<selectionTotal; i++) {
		var picItem = eval("mini_"+i);
		//picItem._xscale = picItem._xscale*miniItemScale[0];
		//picItem._yscale = picItem._yscale*miniItemScale[1];
                              
		/*if (picArrayOptions) {
			picArray = eval("picArrayPlace_"+subpicItem.index);
		} else {*/
			picArray = eval("picArrayPlace_"+0);
		//}
		picItem._x = picObject._x+Number(picArray[i][0]);
		picItem._y = picObject._y+Number(picArray[i][1]);

		trace("picArray: "+picArray);
		trace("picitem: "+picItem);
		trace("picitemx: "+picItem._x);
		trace("picitemy: "+picItem._y);
		trace("picitemx: "+picArray[picItemIndex[i]][0]);
		trace("picitemy: "+picArray[picItemIndex[i]][1]);
		trace("picIndex: "+picItem.subIndex);
		trace("picIndex: "+picItem.index);
		picItem._visible = true;
		if(!piclevels){
			picItem.swapDepths(level++);
		}
		picItem.tabEnabled = false;
	}

	function_Report("picture_Display","end",0);
}



function picture_Setup() {
	function_Report("picture_Setup","begin",0);
	trace("************************Picture Mode************************");

	//Adding Main Picture
	itemName = "picture_"+0;
	myRoot.attachMovie(itemName,itemName,level++);
	var itemObject = eval(itemName);
	itemObject.numberTextField.text = 0;
	itemObject._visible = false;
	itemObject._xscale = itemObject._yscale=100;
	itemObject.itemValueIndex = 0;
	itemObject.imageWidth = itemObject._width;
	itemObject.imageHeight = itemObject._height;
		
	//Bounds
	var boundsObject = itemObject.getBounds(itemObject);
	itemObject.xMin = boundsObject.xMin;
	itemObject.xMax = boundsObject.xMax;
	itemObject.yMin = boundsObject.yMin;
	itemObject.yMax = boundsObject.yMax;
	trace("coords: ["+itemObject.xMin+","+itemObject.xMax+"] ["+itemObject.yMin+","+itemObject.yMax+"]");

	notAvailIndex = new Array();
	var selectNum = -1;
	var selectRange = (subpicArray.length-subPicTotal)+1;
	selectionChoice = selectInOrder(classOptions, subPicTotal, 0);

	//SubPictures - Not Mini items used for the ranking!
	for (var i = 0; i<subPicTotal; i++) {
		itemName = "subPicture_"+i;
		var itemObject = myRoot.attachMovie(itemName,itemName,level++);

		///*****SubPictures Class********//
		if (classUsed[0]<>false) {
			subChoice = selectionChoice[i];
			subClass = itemObject.attachMovie(classUsed[0], "class_"+0, myRoot.level++);
			ClassOptions(subClass,subChoice);
			itemObject.index = subChoice;
		} else {
			if (subPicTotal != subpicArray.length) {
				var tempSelect = Math.floor(Math.random()*selectRange);
				selectNum = tempSelect+selectNum+1;
				itemObject.index = selectNum;
			} else {
				itemObject.index = i;
			}

			if (!picEqualSub) {
				trace("Equal is true,i: "+i);
				picArray = eval("picArray_"+0);
				for (var j = 0; j<picArray.length; j++) {
					trace("Equal is true,i: "+j);
					if ((subpicArray[itemObject.index][0] == picArray[j][0]) && (subpicArray[itemObject.index][1] == picArray[j][1])) {
						notAvailIndex.push(j);
						trace("notAvailIndex: "+notAvailIndex);
					}
				}
			}
		}
			//******* SubPictures Options*******//
			if (subOptions[0]>0) {
				subIndex = Math.floor(Math.random()*subOptions[0]);
				subOpt = addOptions(itemObject, subIndex);
				//subOpt = addOptions(itemObject, itemIndex);
				trace("SubOptions: "+subOpt+itemIndex);
				//addOptions(itemObject, 0);
			}

			itemObject.numberTextField.text = 0;
			itemObject._visible = false;
			itemObject._xscale = itemObject._yscale=100;
			itemObject.itemValueIndex = 0;
			itemObject.imageWidth = itemObject._width;
			itemObject.imageHeight = itemObject._height;
			var boundsObject = itemObject.getBounds(itemObject);
			itemObject.xMin = boundsObject.xMin;
			itemObject.xMax = boundsObject.xMax;
			itemObject.yMin = boundsObject.yMin;
			itemObject.yMax = boundsObject.yMax;
			trace("coords: ["+itemObject.xMin+","+itemObject.xMax+"] ["+itemObject.yMin+","+itemObject.yMax+"]");
		}
		var selectNum = -1;
		//var selectRange = (picArray.length-selectionTotal)+1;
		picArray = eval("picArray_"+0);
		var selectRange = (picArray.length-selectionTotal)+1-notAvailIndex.length;
		var findEqual = true;
		picItemIndex = new Array();
		if (subPicTotal>0) {
			for (var i = 0; i<selectionTotal; i++) {
				if (selectionTotal != picArray.length) {
					while (findEqual) {
						var tempSelect = Math.floor(Math.random()*selectRange);
						trace("Loop tempSelect, SelectNum, selectRange: "+tempSelect+selectNum+selectRange);
						//selectNum = tempSelect+selectNum+1;
						if (!picEqualSub) {
							for (var j = 0; j<notAvailIndex.length; j++) {
								if (notAvailIndex[j] == (tempSelect+selectNum+1)) {
									findEqual = true;
									break;
								} else {
									findEqual = false;
								}

							}
						} else {
							findEqual = false;
						}

					}
					selectNum = tempSelect+selectNum+1;
					picItemIndex.push(selectNum);
					trace("tempSelect, SelectNum, selectRange: "+tempSelect+selectNum+selectRange);
					selectRange = selectRange-tempSelect;
					if (selectNum<notAvailIndex[0] && selectRange == 1) {
						selectRange += notAvailIndex.length;
					}


				} else {
					picItemIndex.push(i);
				}
				findEqual = true;

			}
		}

		//locking in information for the mini items
		if (picArrayOptions) {
			//var temppicArray = eval("picArray_"+subpicItem.index);
			var temppicArray = eval("picArray_"+rankNum);
		} else {
			var temppicArray = eval("picArray_"+0);
		}
		trace("temppicArray: "+temppicArray+temppicArray.length+selectionTotal);
		picArrayPlace_0 = new Array();
		if(temppicArray.length > selectionTotal)
		{
			var tempSelect = selectInOrder(temppicArray.length, selectionTotal, 0);
			trace("temppicArray: "+temppicArray + tempSelect);
			for (var i = 0; i<selectionTotal; i++) {
				picArrayPlace_0.push(temppicArray[tempSelect[i]]);
			}
		}
		else {
			picArrayPlace_0 = temppicArray;
		}

		trace("picArrayPlace: "+picArrayPlace_0);
/*
		if (picArrayOptions) {
			picArray = eval("picArray_"+subIndex);
		} else {
			picArray = eval("picArray_"+0);
		}
*/
		if (picArrayRanges)
		{
			picArray = eval("picArray_"+0);
			picArrayRange = eval("picArrayRange_"+subIndex);
			trace("picArray: "+picArray+subIndex);
			picArray = lineEquation(picArrayRange, picArray);
		}
}


function addOptions(item, index) {
	var optionNew = "option_"+index;
	optionNew = item.attachMovie(optionNew, optionNew, level++);
	trace("Option New:"+index+optionNew);
	return optionNew;
}

function random_Rank() {
	Math.floor(Math.random()*selectionTotal);

}

// display the terms that describe the range
function rangeLabels_Display() {
	function_Report("rangeLabels_Display","begin",0);
	var termName = "rankingTerms_"+rankNum;
	termArray = eval(termName);
	termArray = toArray_Convert(termArray, delim_0, delim_1, true);
	if (dynamicItem_rankingTerms[0]<>undefined) {
		for (var i = 0; i<dynamicItem_rankingTerms.length; i++) {
			termArray.push(dynamicItem_rankingTerms[i]);
		}
	}
	if (cyclicMode) {
		// //////////////////////////////////////////////////
		// labelArray.push(cyclicArray[cyclicStart][0]);
		if(equivMode)
		{
			termArray[termArray.length-2]=(equivCyclicLabels[cyclicStart]);
		}
		else
		{
			termArray.push(itemLabels[cyclicStart][1]);
		}
		trace("termArray: "+termArray);
		trace("itemLabels: "+itemLabels);
		trace("cyclicStart: "+cyclicStart);
		// //////////////////////////////////////////////////
	}	rangebeginTextField.text = termArray[0];
	rangebeginTextField.autoSize = "left";
	rangeendTextField.text = termArray[1];
	rangeendTextField.autoSize = "right";
	function_Report("rangeLabels_Display","end",0);
}

// choose a rankOrder
function rank_Select() {
	function_Report("rank_Select","begin",0);
/*	if(stageMode)
	{
		if(rankNum == null)
		{
			rankNum=Math.floor(Math.random()*2);
		}		
		if(sameStage == null) 
		{
			sameStage = true;
		}
		if(sameStage)
		{
			if((rankNum%2) == 0)
			{
				rankNum++;
			}else{
				rankNum--;
			}
		}else{
			if((rankNum%2) == 0)
			{
				rankNum = rankNum + Math.floor(Math.random()*2) + 1;
			}else{
				rankNum = rankNum + Math.floor(Math.random()*2);
			}
			if(rankNum>=rankArray.length)
			{
				rankNum=0;
			}
		}

	}
	else{	
		if (rankNum == null) {
			if (rankArray[1]<>undefined) {
				var rankIndex = Math.floor(Math.random()*rankArray.length);
				if (rankArray[rankIndex][0]<>undefined) {
					rankNum = rankArray[rankIndex][0];
				} else {
					rankNum = rankArray[0];
				}
			} else {
				rankNum = rankArray;
				var rankIndex = 0;
			}
		} else {
			var rankIndex = 0;
		}
	}
*/	if (rankArray[rankIndex].length>1) {
		itemLabels = eval("itemLabels_"+rankArray[rankIndex][1]);
	} else {
		itemLabels = itemLabels_0;
	}
	if (itemLabels == null) {
		itemLabels = [];
	}
	itemLabels = toArray_Convert(itemLabels, delim_0, delim_1, false);
	trace("itemLabels: "+itemLabels);
	if (rankArray[rankIndex].length>2) {
		itemValues = eval("itemValues_"+rankArray[rankIndex][2]);
	} else {
		itemValues = itemValues_0;
	}
	itemValues = toArray_Convert(itemValues, delim_0, delim_1, false);
	for (var i = 0; i<itemValues.length; i++) {
		if (String(Number(itemValues[i])) == itemValues[i]) {
			itemValues[i] = Number(itemValues[i]);
		}
	}
	rankOrder = eval("rank_"+rankNum);
	rankOrder = toArray_Convert(rankOrder, delim_0, delim_1, false);
	trace("rankOrder: "+rankOrder);
	// when rankOrder is not an array (is 1 or -1), create numerical or reverse numerical rankOrder
	rankType = 1;
	if (rankOrder[1] == null) {
		rankType = (data_Test(rankOrder)) ? Number(String(rankOrder)) : 1;
		trace("rankType: "+rankType);
		if (rankType == 1) {
			trace("rankType equals 1");
		}
		if (rankType == -1) {
			trace("rankType equals -1");
		}
		if (rankType != 1) {
			trace("rankType does not equal 1");
		}
		if (rankType != -1) {
			trace("rankType does not equal -1");
		}

		rankOrder = new Array();
		for (var i = 0; i<itemTotal; i++) {
			rankOrder.push(i);
		}
		if (rankType == -1) {
			rankOrder.reverse();
		}
	}
	if (equivMode) {
		if (rankType == -1) {
			equivButtonArray.reverse();
		}
		equivOrder = new Array();
		trace("equivOrder: "+equivOrder);
		//Convert to equivOrder format [object]=rank rather than [rank]=object
		for (var i = 0; i<rankOrder.length; i++) {
			var temp0 = new Array();
			equivOrder[rankOrder[i]] = i;
		}
		trace("equivOrder: "+equivOrder);
		for (var i = 0; i<equivArray.length; i++) {
			var temp1 = new Array();
			trace("temp1: "+temp1+equivArray.length+equivArray[i].length+equivArray[i]);
			for (var j = 0; j<equivArray[i].length; j++) {
				temp1.push(equivOrder[equivArray[i][j]]);
				var argh = isNaN(temp1[j]);
				trace("equivOrder[equivArray[i][j]]: "+equivOrder[equivArray[i][j]]);
				trace("argh: "+argh);
				trace("temp1: "+temp1);
				trace("equivOrder1: "+equivOrder);
			}
			temp1.sort();
			for (var k = 0; k<equivArray[i].length; k++) {
				equivOrder[equivArray[i][k]] = temp1;
				trace("equivOrder2: "+equivOrder);
				trace("temp1: "+temp1);
			}
		}
		trace("equivOrder: "+equivOrder);
	}

	variable_Report("rank_Select","defined","itemLabels,itemValues,rankNum,rankOrder,rankArray,rankType");
	function_Report("rank_Select","end",0);
}


function rankOrder_Cycle() {
	function_Report("rankOrder_Cycle","begin",0);
	variable_Report("rankOrder_Cycle","referenced","cyclicStart,rankOrder,itemValues");
	if (dynamicMode) {
		trace("dynamicMode");
		var flag = true;
		var counter = 0;
		helpClip.helpTextField.text += "rankOrder_Cycle while #1\r";
		while (flag) {
			counter++;
			var itemName = "item_"+rankOrder[0];
			var itemObject = eval(itemName);
			trace("rankType: "+rankType);
			trace("cyclicStart: "+cyclicStart);
			if(equivMode)
			{
				itemValues = equivCyclicValues;
				//trace("equivitemValues:"+equivCyclicValues.length+equivCyclicValues);
			}
			trace("itemValues[cs]: "+itemValues[cyclicStart]);
			var value_1 = (rankType == 1) ? itemObject.itemValue : itemValues[cyclicStart];
			var value_2 = (rankType == -1) ? itemObject.itemValue : itemValues[cyclicStart];
			trace("value_1: "+value_1);
			trace("value_2: "+value_2);
			if (value_1<value_2) {
				rankOrder.push(rankOrder.shift());
				trace("new rankOrder: "+rankOrder);
			} else {
				flag = false;
			}
			if (counter == selectionTotal) {
				flag = false;
			}
		}
	} else {
		helpClip.helpTextField.text += "rankOrder_Cycle while #2\r";
		while (rankOrder[0]<>cyclicStart) {
			rankOrder.push(rankOrder.shift());
		}
	}
	if(equivMode)
	{
		equivOrder=rankToEquiv();
		trace("equivOrder:"+equivOrder);
	}
	variable_Report("rankOrder_Cycle","defined","rankOrder");
	function_Report("rankOrder_Cycle","end",0);
}

function rankToEquiv() {
	equivOrder = new Array();
	trace("equivOrder: "+equivOrder);
	//Convert to equivOrder format [object]=rank rather than [rank]=object
	for (var i = 0; i<rankOrder.length; i++) {
		var temp0 = new Array();
		equivOrder[rankOrder[i]] = i;
	}
	trace("equivOrder: "+equivOrder);
	for (var i = 0; i<equivArray.length; i++) {
		var temp1 = new Array();
		trace("temp1: "+temp1);
		for (var j = 0; j<equivArray[i].length; j++) {
			temp1.push(equivOrder[equivArray[i][j]]);
			var argh = isNaN(temp1[j]);
			trace("argh: "+argh);
			trace("temp1: "+temp1);
			trace("equivOrder1: "+equivOrder);
		}
		temp1.sort();
		for (var k = 0; k<equivArray[i].length; k++) {
			equivOrder[equivArray[i][k]] = temp1;
			trace("equivOrder2: "+equivOrder);
			trace("temp1: "+temp1);
		}
	}
	return equivOrder;
}


// remove unused items from rankOrder
function rankOrder_Prune() {
	function_Report("rankOrder_Prune","begin",0);
	var rankLength = rankOrder.length;
	for (var i = (rankLength-1); i>=0; i--) {
		var flagFound = false;
		for (var j = 0; j<selectionTotal; j++) {
			if (rankOrder[i] == selectionArray[j]) {
				flagFound = true;
			}
		}
		if (!flagFound) {
			rankOrder.splice(i,1);
		}
	}
	function_Report("rankOrder_Prune","end",0);
}

function rationale_Display() {
	rationaleClip.removeMovieClip();
	rationale_Display_Part1();
}

function rationale_Display_Part1() {
	function_Report("rationale_Display_Part1","begin",1);
	//if Vertical picture then everything needs to move over by an offset.
	if (pictureMode && (pictureStyle == 2)) {
		//vertOffset = (myRoot_width-((myRoot.instructionsTextField._width+myRoot.PictureArea._width)*0.5))/2;
		//Adding back in for picture style 2 as of 11/8/11
		vertOffset = (myRoot_width-((myRoot.instructionsTextField._width+myRoot.PictureArea._width)*0.5))/2;
		//vertOffset = 0;
	} else {
		vertOffset = 0;
	}
		trace("vertOffset: "+vertOffset);
	myRoot.createEmptyMovieClip("rationaleClip",level++);
	rationaleClip.createEmptyMovieClip("backgroundClip",level++);
	with (rationaleClip.backgroundClip) {
		beginFill("0x"+colorSchemeObject.colorBackground,100);
		lineStyle(0,0x0000FF,0);
		moveTo(0,0);
		lineTo(myRoot_width,0);
		lineTo(myRoot_width,myRoot_height);
		lineTo(0,myRoot_height);
		endFill();
	}
	rationaleClip.backgroundClip.tabEnabled = false;
	rationaleClip.createEmptyMovieClip("activityClip",level++);
	rationaleClip.activityClip._xscale = rationaleClip.activityClip._yscale=75;
	rationaleClip.activityClip.createEmptyMovieClip("backgroundClip",level++);
	with (rationaleClip.activityClip.backgroundClip) {
		beginFill(0xFFFFFF,0);
		lineStyle(1,0x0000FF,0);
		moveTo(0,0);
		lineTo(myRoot_width,0);
		lineTo(myRoot_width,myRoot_height);
		lineTo(0,myRoot_height);
		endFill();
	}
	rationaleClip.activityClip.tabEnabled = false;
	rationaleClip.activityClip.createTextField("instructionsTextField",level++,myRoot.instructionsTextField._x+vertOffset,myRoot.instructionsTextField._y,myRoot.instructionsTextField._width,500);
	with (rationaleClip.activityClip.instructionsTextField) {
		setTextFormat(instructionsFormat);
		html = true;
		selectable = false;
		multiline = true;
		wordWrap = true;
		embedFonts = true;
		htmlText = myRoot.instructionsTextField.htmlText;
		autoSize = "left";
	}
	rationaleClip.activityClip.attachMovie("arrowClip","arrowClip",level++);
	with (rationaleClip.activityClip.arrowClip) {
		_x = arrowClip._x+vertOffset;
		_y = arrowClip._y-10;
		_xscale = _yscale=arrowClip._xscale;
		_alpha = arrowClip._alpha;
	}
	rationaleClip.activityClip.createTextField("rangebeginTextField",level++,rangebeginTextField._x+vertOffset,rangebeginTextField._y-10,myRoot.rangebeginTextField._width,500);
	with (rationaleClip.activityClip.rangebeginTextField) {
		html = false;
		selectable = false;
		multiline = false;
		wordWrap = false;
		embedFonts = true;
		htmlText = rangebeginTextField.text;
		autoSize = "left";
		setTextFormat(instructionsFormat);
	}
	rationaleClip.activityClip.createTextField("rangeendTextField",level++,myRoot.rangeendTextField._x+vertOffset,myRoot.rangeendTextField._y-10,myRoot.rangeendTextField._width,500);
	with (rationaleClip.activityClip.rangeendTextField) {
		html = false;
		selectable = false;
		multiline = false;
		wordWrap = false;
		embedFonts = true;
		htmlText = myRoot.rangeendTextField.text;
		autoSize = "right";
		setTextFormat(instructionsFormat);
	}
	if (dynamicMode) {
		dynamicItemPath = rationaleClip.activityClip;
		var itemObject = eval("item_"+dynamicItemNum);
		rationaleClip.activityClip.attachMovie("item_"+dynamicItemNum,"item_0",level++,itemObject);
	} else {
		for (i=0; i<selectionTotal; i++) {
			var itemName = "item_"+selectionArray[i];
			var itemObject = eval(itemName);
			var rationaleItemName = "rationaleClip.activityClip."+itemName;
			rationaleClip.activityClip.attachMovie(itemName,itemName,level++,itemObject);
			if (pictureMode) {
				rationaleClip.activityClip.itemObject.duplicateMovieClip("mini_"+counter,100+counter);
				trace("new mini: "+eval("mini_"+counter));
			}

		}

		rationale_Display_Part2();
	}
	if (pictureMode) {
		var itemObject1 = eval("picture_"+0);
		var temppic = rationaleClip.activityClip.attachMovie("picture_"+0, "picture_0", level++, itemObject1);
		trace("new picture: "+temppic);
		for (var i = 0; i<subPicTotal; i++) {
			itemName = "subPicture_"+i;
			subitem = eval(itemName);
			var itemObject = temppic.attachMovie(itemName,itemName,level++);
			trace("part2, subPic= "+itemObject+" i= "+i);

			///*****SubPictures Class********//
			if (classUsed[0]<>false) {
				subChoice = selectionChoice[i];
				subClass = temppic.attachMovie(classUsed[0], "class_"+0, myRoot.level++);
				ClassOptions(subClass,subChoice);
				itemObject.index = subChoice;
				//itemObject1._x = myRoot_width-subClass._width/2;
				//subClass._x = 0;
			} 
			//******* SubPictures Options*******//
			if (subOptions[0]>0) {
				subOpt = addOptions(itemObject, subIndex);
				subOpt._x=0;
				subOpt._y=0;
				trace("SubOptions: "+subOpt+itemIndex);
			}

			
		}

	}
	function_Report("rationale_Display_Part1","end",1);
}

function rationale_Display_Part2() {
	function_Report("rationale_Display_Part2","begin",1);
	var yMax = 0;
	for (var i=0; i<selectionTotal; i++) {

		var itemName = "item_"+selectionArray[i];
		var itemObject = eval(itemName);
		var rationaleItemName = "rationaleClip.activityClip."+itemName;
		var rationaleItemObject = eval(rationaleItemName);
		rationaleItemObject._xscale = itemObject._xscale;
		rationaleItemObject._yscale = itemObject._yscale;
		if (locked) {
			rationaleItemObject._x = itemObject.correctX+vertOffset;
			rationaleItemObject._y = itemObject.correctY-25;
		} else {
			rationaleItemObject._x = (data_Test(itemObject.newX)) ? itemObject.newX+vertOffset+200 : itemObject._x+vertOffset;
			rationaleItemObject._y = itemObject._y-25;
		}
		delete rationaleItemObject.onPress;
		delete rationaleItemObject.onRelease;
		delete rationaleItemObject.onReleaseOutside;
		delete rationaleItemObject.onRollOver;
		delete rationaleItemObject.onRollOut;
		delete rationaleItemObject.onEnterFrame;
		itemLabel_Display(rationaleItemObject,i);

		if (locked) {
			itemFeedback_Display(rationaleItemObject,i);
		}
		var boundsObject = rationaleItemObject.getBounds(rationaleClip);
		if (boundsObject.yMax>yMax) {
			yMax = boundsObject.yMax;
		}

	}
	if (pictureMode) {
		itemName = "picture_"+0;
		itemObject = eval(itemName);
		rationaleItemName = "rationaleClip.activityClip."+itemName;
		rationaleItemObject = eval(rationaleItemName);

		rationaleItemObject._xscale = itemObject._xscale;
		rationaleItemObject._yscale = itemObject._yscale;
		if (pictureMode && pictureStyle == 2) {
			if (locked) {
				rationaleItemObject._x = itemObject._x+subChoice*45+vertOffset;
				rationaleItemObject._y = itemObject._y-lessonbuttonClip._height;
			} else {
				rationaleItemObject._x = (data_Test(itemObject.newX)) ? itemObject.newX+vertOffset : itemObject._x+vertOffset;
				rationaleItemObject._y = itemObject._y-lessonbuttonClip._height;
			}
		}
		else {
			if (locked) {
				rationaleItemObject._x = itemObject._x+vertOffset;
				rationaleItemObject._y = itemObject._y-lessonbuttonClip._height;
			} else {
				rationaleItemObject._x = (data_Test(itemObject.newX)) ? itemObject.newX+vertOffset : itemObject._x+vertOffset;
				rationaleItemObject._y = itemObject._y-lessonbuttonClip._height;
			}
   		}



		var boundsObject = rationaleItemObject.getBounds(rationaleClip);
		if (boundsObject.yMax>yMax) {
			yMax = boundsObject.yMax;
		}

/*		if (pictureMode && pictureStyle == 2) {
			rationaleItemObject._x = myRoot.instructionsTextField._width+(myRoot.PictureArea._width*0.5)+(boundsObject.xMin-(rationaleItemObject._width*0.5));
			trace("******Item Placement*******: "+myRoot.instructionsTextField._width+" "+(myRoot.PictureArea._width*0.5)+" "+boundsObject.xMin+" "+(rationaleItemObject._width*0.5));
		}
*/
		for (i=0; i<selectionTotal; i++) {
			var itemName = "mini_"+selectionArray[i];
			var itemObject = eval(itemName);
			var rationaleItemName = "rationaleClip.activityClip."+itemName;
			var rationaleItemObject = eval(rationaleItemName);
			rationaleItemObject._xscale = itemObject._xscale;
			rationaleItemObject._yscale = itemObject._yscale;
			if (locked) {
				rationaleItemObject._x = itemObject._x+vertOffset;
				rationaleItemObject._y = itemObject._y-25;
			} else {
				rationaleItemObject._x = (data_Test(itemObject.newX)) ? itemObject.newX+vertOffset : itemObject._x+vertOffset;
				rationaleItemObject._y = itemObject._y-25;
			}

		}
	}

	rationaleClip.createEmptyMovieClip("rationaleBackgroundClip",level++);

	rationaleSpacing = 30;
	rationaleSpacing2 = 50;
	//with (rationaleClip.rationaleBackgroundClip) {      
	rationaleClip.rationaleBackgroundClip.beginFill(0xFFFFFF,100);
	rationaleClip.rationaleBackgroundClip.lineStyle(0,0x0000FF,0);
	rationaleClip.rationaleBackgroundClip.moveTo(50,yMax+rationaleSpacing);
	rationaleClip.rationaleBackgroundClip.lineTo(myRoot_width-50,yMax+rationaleSpacing);
	rationaleClip.rationaleBackgroundClip.lineTo(myRoot_width-50,myRoot_height-rationaleSpacing2);
	rationaleClip.rationaleBackgroundClip.lineTo(50,myRoot_height-rationaleSpacing2);
	rationaleClip.rationaleBackgroundClip.endFill();
	//}
	//rationaleClip.createTextField("rationaleTextField",level+2,50,yMax+30,myRoot_width-100,myRoot_height-yMax-30-40);
	rationaleClip.createTextField("rationaleTextField",level+2,50,yMax+rationaleSpacing,myRoot_width-100,myRoot_height-yMax-rationaleSpacing-rationaleSpacing2);
	if (locked) {
		rationaleClip.rationaleTextField.type = "dynamic";
		rationaleClip.rationaleTextField.selectable = false;
	} else {
		rationaleClip.rationaleTextField.type = "input";
		rationaleClip.rationaleTextField.selectable = true;
	}
	rationaleClip.rationaleTextField.multiline = true;
	rationaleClip.rationaleTextField.wordWrap = true;
	rationaleClip.rationaleTextField.embedFonts = true;
	rationaleClip.rationaleTextField.text = " ";
	rationaleClip.rationaleTextField.border = true;
	rationaleClip.rationaleTextField.setTextFormat(inputFormat);
	rationaleClip.rationaleTextField.onChanged = function(textObject) {
		myRoot.rationaleString = this.text;
	};
	rationaleClip.createTextField("instructionsTextField",level++,0,rationaleClip.rationaleTextField._y-20,myRoot_width,200);
	rationaleClip.instructionsTextField.html = true;
	rationaleClip.instructionsTextField.selectable = false;
	rationaleClip.instructionsTextField.multiline = false;
	rationaleClip.instructionsTextField.wordWrap = false;
	rationaleClip.instructionsTextField.embedFonts = true;
	if (locked) {
		rationaleClip.instructionsTextField.htmlText = rationaleinstructionsTextStyleHTML+"Explanation of correct ranking (shown above)"+"</font>";
	} else {
		rationaleClip.instructionsTextField.htmlText = rationaleinstructionsTextStyleHTML+"Type your rationale in the text box below, then click the Continue button"+"</font>";
	}
	//rationaleClip.instructionsTextField.setTextFormat(itemlabelFormat);
	rationaleClip.instructionsTextField.autoSize = "center";
	rationaleClip.attachMovie("continueButton","continueButton",level++);
	rationaleClip.continueButton._x = myRoot_width/2;
	rationaleClip.continueButton._y = myRoot_height-30;
	rationaleClip.continueButton.onRelease = function() {
		myRoot.rationaleButton_Update();
		this._parent._visible = false;
	};
	rationaleClip.continueButton.tabEnabled = false;
	rationale_Display_Part3();
	function_Report("rationale_Display_Part2","end",1);
}

function rationale_Display_Part3() {
	function_Report("rationale_Display_Part3","begin",1);
	for (i=0; i<selectionTotal; i++) {
		var itemName = "item_"+selectionArray[i];
		var itemObject = eval(itemName);
		var rationaleItemName = "rationaleClip.activityClip."+itemName;
		var rationaleItemObject = eval(rationaleItemName);
		if (not locked) {
			if (data_Test(itemObject.newX)) {
				trace("alert 1");
				rationaleItemObject._x = itemObject.newX+vertOffset;
			} else {
				trace("alert 2");
				rationaleItemObject._x = itemObject._x+vertOffset;
			}
		}
	}
	rationaleClip.activityClip._x = (myRoot_width/2)-(rationaleClip.activityClip._width/2);
	rationaleClip.backgroundClip.onRelease = function() {
	};
	rationaleClip.backgroundClip.useHandCursor = false;
	rationaleClip.timeStart = new Date();
	rationaleClip.onEnterFrame = function() {
		this.timeCurrent = new Date();
		if ((this.timeCurrent.getTime()-this.timeStart.getTime())>0) {
			Selection.setFocus(myRoot.rationaleClip.rationaleTextField);
			Selection.setSelection(-1,-1);
			if (myRoot.locked) {
				//this.rationaleTextField.text = myRoot.explanationText;
				this.rationaleTextField.html = true;
				this.rationaleTextField.htmlText = myRoot.explanationText;
			} else {
				this.rationaleTextField.html = false;
				if (myRoot.rationaleString.length>0) {
					this.rationaleTextField.text = myRoot.rationaleString;
				} else {
					this.rationaleTextField.text = "";
				}
			}
			Selection.setSelection(this.rationaleTextField.length,this.rationaleTextField.length);
			myRoot.rationaleClip.rationaleTextField.setTextFormat(inputFormat);
			delete this.onEnterFrame;
		}
	};
	rationaleClip.swapDepths(25000);
	function_Report("rationale_Display_Part3","end",1);
}

function rationaleButton_Update() {
	//
	response_Set();
	rationalebuttonClip.rationalepreviewClip.rationaleTextField.text = rationaleString;
	if (rationaleString == "") {
		rationalebuttonClip.statusTextField.htmlText = "<b><font color=\"#FF0000\">incomplete - click here to enter</font></b>";
		rationalebuttonClip.timeStart = new Date();
		rationalebuttonClip.blinkStatus = true;
		rationalebuttonClip.blinkCount = 0;
		rationalebuttonClip.onEnterFrame = function() {
			this.timeCurrent = new Date();
			if ((this.timeCurrent.getTime()-this.timeStart.getTime())>300) {
				this.blinkCount++;
				this.blinkStatus = !this.blinkStatus;
				if ((this.blinkStatus) or (this.blinkCount == 10)) {
					rationalebuttonClip.statusTextField.htmlText = "<p align='center'><b><font color=\"#FF0000\">incomplete - click here to enter</font></b></p>";
				} else {
					rationalebuttonClip.statusTextField.htmlText = "<p align='center'><b><font color=\"#FF8800\">incomplete - click here to enter</font></b></p>";
				}
				if (this.blinkCount == 10) {
					delete this.onEnterFrame;
				} else {
					this.timeStart = new Date();
				}
			}
		};
	} else {
		rationalebuttonClip.statusTextField.htmlText = "<b><font color=\"#00AA00\">complete - click here to edit</font></b>";
		delete rationalebuttonClip.onEnterFrame;
	}
}

function response_Set() {
	function_Report("response_Set","begin",0);
	//responsedelim_0 is a comma
	var orderString = selectionArray.join(responsedelim_0);
	// var rationaleStringURL = escape(rationaleString);
	var rationaleStringURL = rationaleString;
	trace("dynamicString: "+dynamicString);
	constantArray = toArray_Convert(constantString, responsedelim_0, responsedelim_1, true);
	trace("constantString: "+constantString);
	trace("constantArray: "+constantArray);
	dynamicParamArray = dynamicParamArray_Construct(dynamicString.split(responsedelim_1));
	response = grade_Get()+responsedelim_1+orderString+responsedelim_1+rankNum+responsedelim_1+cyclicStart+responsedelim_1+rationaleStringURL+responsedelim_1+constantString+responsedelim_1+dynamicString;
	trace("response: "+response);
	helpClip.helpTextField.text += "response: "+response+"\r";
/*	for (var i = 0; i<selectionTotal; i++) {
		equivButton1 = eval("equivButton_"+i);
		equivButton1.swapDepths(myRoot.level++);
	}*/
	function_Report("response_Set","end",0);
}

function selectionData_Process(inputArray) {
	//trace("inputArray: " + inputArray);
	var outputArray = [];
	for (var i = 0; i<inputArray.length; i++) {
		var tempArray = inputArray[i].split("-");
		if (tempArray.length>1) {
			//trace(tempArray);
			for (var j = tempArray[0]; j<=tempArray[1]; j++) {
				outputArray.push(j);
			}
		} else {
			//trace(tempArray);
			outputArray.push(Number(inputArray[i]));
		}
		//trace(outputArray);
	}
	return outputArray;
}

//Select a random number list in order out of a certain amount
function selectInOrder(total, selectTotal, startNum) {
	var finalSelection = new Array();
	trace("selectInOrder= "+ total + selectTotal + startNum)
	if (subOptionSame) {
		selectNum = startNum+Math.floor(Math.random()*total);
		for (var i = 0; i<selectTotal; i++) {

			finalSelection.push(selectNum);
		}
	} else if (subOptionOrder) {
		subOptionOrdering();
		for (var i = 0; i<selectTotal; i++) {

			finalSelection.push(subOptionOrder[i]);
		}
	} else {
		var selectNum = -1;
		var selectRange = (total-selectTotal)+1;
		for (var i = startNum; i<selectTotal; i++) {
			if (selectTotal != total) {
				var tempSelect = Math.floor(Math.random()*selectRange);
				selectNum = tempSelect+selectNum+1;
				finalSelection.push(selectNum);
			} else {
				finalSelection.push(i);
			}
			selectRange = selectRange-tempSelect;
		}

	}
	finalSelection.push(0);
	return finalSelection;
}


function string_Parse(dataInput) {
	var htmltagArray = ["<a href", "<a target", "</a>", "<b>", "</b>", "<br>", "<font", "</font>", "<img", "<i>", "</i>", "<li>", "</li>", "<p>", "<p align>", "<p class>", "<span", "<textformat", "<u>", "</u>"];
	trace("old string: "+dataInput);
	if (dataInput.split("<").length>1) {
		var textString = "";
		var counter = 0;
		while (counter<dataInput.length) {
			if (dataInput.charAt(counter) == "<") {
				var flag = false;
				for (var i = 0; i<htmltagArray.length; i++) {
					if (dataInput.substr(counter, htmltagArray[i].length) == htmltagArray[i]) {
						flag = true;
						break;
					}
				}
				if (flag) {
					textString += htmltagArray[i];
					counter += htmltagArray[i].length;
				} else {
					textString += "&lt;";
					counter += 1;
				}
			} else {
				textString += dataInput.charAt(counter);
				counter += 1;
			}
		}
		dataInput = textString;
		trace("new string: "+dataInput);
	}
	return dataInput;
}

function toArray_Convert(dataInput, delim_0, delim_1, flagForceConvert) {
	if (dataInput[1] == undefined) {
		// if dataInput IS NOT an array...
		var temp = dataInput.split(delim_1);
		if (temp.length>1) {
			for (var i = 0; i<temp.length; i++) {
				temp[i] = temp[i].split(delim_0);
				if (temp[i].length == undefined) {
					var temp2 = new Array();
					temp2.push(temp[i]);
					temp[i] = temp2;
				}
			}
			dataInput = temp;
		} else {
			// if dataInput IS an array...
			var temp = dataInput.split(delim_0);
			if (temp.length<>undefined) {
				dataInput = temp;
			} else if (flagForceConvert) {
				temp = new Array();
				temp.push(dataInput);
				dataInput = temp;
			}
		}
	}
	return dataInput;
}

function toEquivArray_Convert(dataInput, delim_0, delim_1, flagForceConvert) {
	if (dataInput[1] == undefined) {
		// if dataInput IS NOT an array...
		var temp = new Array();
		var temp1 = dataInput.split(delim_1);
		if (temp1.length>1) {
			for (var i = 0; i<temp1.length; i++) {
				temp1[i] = temp1[i].split(delim_0);
				if (temp1[i].length>1) {
					for (var j = 0; j<temp1[i].length-1; j++) {
						temp.push(1);
					}
				}
				if (i+1<temp1.length) {
					temp.push(0);
				}
			}
		} else {//All Equal
			temp1[0] = temp1[0].split(delim_0);
			for (var i = 0; i<temp1[0].length; i++) {
				temp.push(1);
			}
		}
		dataInput = temp;
	}
	return dataInput;
}

function function_Report(functionName, functionStatus, functionLevel) {
	var functionString = "";
	for (var i = 0; i<functionLevel; i++) {
		functionString += "  ";
	}
	if (functionStatus<>"end") {
		functionString += "FUNCTION ";
	} else {
		functionString += "---------";
	}
	functionString += functionStatus+" "+functionName;
	trace(functionString);
	if (functionStatus == "end") {
		trace("");
	}
}

function variable_Report(functionName, variableStatus, variableData) {
	trace("");
	trace("VARIABLES ("+functionName+") "+variableStatus);
	var variableArray = variableData.split(responsedelim_0);
	for (var i = 0; i<variableArray.length; i++) {
		if (!data_Test(variableArray[i])) {
			trace("!!! WARNING !!!");
		}
		trace(""+variableArray[i]+": "+eval(variableArray[i]));
	}
	trace("");
}

function keyDown_Setup() {
	keyListener_Down = new Object();
	keyListener_Down.onKeyDown = function() {
		trace("DOWN -> Code: "+Key.getCode()+"\tACSII: "+Key.getAscii()+"\tKey: "+chr(Key.getAscii()));
		if ((Key.getCode() == Key.SHIFT) and ((lockClip._visible == false) or (lockClip == null))) {
			flagShiftDown = true;
			manipulationMode_Display();
			Key.removeListener(keyListener_Down);
			Key.addListener(keyListener_Up);
		}
	};
}

function keyUp_Setup() {
	keyListener_Up = new Object();
	keyListener_Up.onKeyUp = function() {
		trace("UP -> Code: "+Key.getCode()+"\tACSII: "+Key.getAscii()+"\tKey: "+chr(Key.getAscii()));
		if ((Key.getCode() == Key.SHIFT) and ((lockClip._visible == false) or (lockClip == null))) {
			flagShiftDown = false;
			manipulationMode_Display();
			componentObject.stopDragging();
			Key.removeListener(keyListener_Up);
			Key.addListener(keyListener_Down);
		}
	};
}

function keyListener_Setup() {
	function_Report("keyListener_Setup","begin",0);
	keyListener = new Object();
	keyListener.onKeyDown = function() {
		trace("keyDown");
		if ((not flagDragging) and (Key.getCode() == Key.SHIFT) and ((lockClip._visible == false) or (lockClip == null))) {
			flagShiftDown = true;
			manipulationMode_Display();
		}
		if (Key.isDown(Key.CONTROL) and Key.isDown(Key.LEFT) and Key.isDown(Key.RIGHT) and (not eduMode)) {
			clipboard_Options();
		}
	};
	keyListener.onKeyUp = function() {
		trace("keyUp");
		if ((not flagDragging) and (Key.getCode() == Key.SHIFT) and ((lockClip._visible == false) or (lockClip == null))) {
			flagShiftDown = false;
			manipulationMode_Display();
			componentObject.stopDragging();
		}
	};
	Key.addListener(keyListener);
	function_Report("keyListener_Setup","end",0);
}



function mouseListener_Setup() {
	function_Report("mouseListener_Setup","begin",0);
	mouseListener = new Object();
	mouseListener.onMouseDown = function() {
		flagMouseDown = true;
	};
	mouseListener.onMouseUp = function() {
		flagMouseDown = false;
	};
	Mouse.addListener(mouseListener);
	function_Report("mouseListener_Setup","end",0);
}

//background color, base text color (instructions, labels), text highlight #1, text highlight #2, etc.
colorScheme_0 = {colorBackground:"FFFFFF", colorTextBody:"000000", colorTextTitle:"666666", colorTextHighlight1:"FF0000", colorTextHighlight2:"0000FF", colorTextHighlight3:"33AA33", colorTextHighlight4:"9900FF"};
colorScheme_1 = {colorBackground:"000000", colorTextBody:"FFFFFF", colorTextTitle:"999999", colorTextHighlight1:"FF6666", colorTextHighlight2:"66AAFF", colorTextHighlight3:"33DD33", colorTextHighlight4:"CC66FF"};

lessonPage = 1;

delim_0 = ";";
delim_1 = "|";
responsedelim_0 = ",";
responsedelim_1 = ";";

clipboardlabelFormat = new TextFormat();
clipboardlabelFormat.font = "Arial Narrow";
clipboardlabelFormat.size = 13;
clipboardlabelFormat.bold = true;
clipboardlabelFormat.align = "left";

clipboardinputFormat = new TextFormat();
clipboardinputFormat.font = "Arial Narrow";
clipboardinputFormat.size = 13;
clipboardinputFormat.bold = false;
clipboardinputFormat.align = "left";

clipboardwarningFormat = new TextFormat();
clipboardwarningFormat.font = "Arial Narrow";
clipboardwarningFormat.size = 11;
clipboardwarningFormat.bold = false;
clipboardwarningFormat.italic = true;
clipboardwarningFormat.color = 0xFF0000;
clipboardwarningFormat.align = "left";

inputFormat = new TextFormat();
inputFormat.font = "Verdana";
inputFormat.size = 11;
inputFormat.color = 0x000000;
inputFormat.align = "left";

instructionsFormat = new TextFormat();
instructionsFormat.font = "Verdana";
instructionsFormat.size = 16;
instructionsFormat.color = 0x000000;
instructionsFormat.align = "left";

itemlabelFormat = new TextFormat();
itemlabelFormat.font = "Verdana";
itemlabelFormat.size = 14;
itemlabelFormat.bold = true;
itemlabelFormat.align = "center";

pagenumFormat = new TextFormat();
pagenumFormat.font = "Verdana";
pagenumFormat.size = 12;
pagenumFormat.bold = true;
pagenumFormat.align = "left";

rankFormat = new TextFormat();
rankFormat.font = "Verdana";
rankFormat.size = 18;
rankFormat.bold = true;

itemDeltaX = 10;
offsetRatio = .35;
selectionDefault = 5;
gradeOptionDefault = 1;

activity_Initialize();

stop();